From 243aef95dde390f97f1e0abbbdb646b3e5b97f7d Mon Sep 17 00:00:00 2001
From: Indrit Bashkimi <indrit.bashkimi@gmail.com>
Date: Thu, 26 Mar 2020 22:11:29 +0100
Subject: [PATCH] Port from Python 2 to Python 3

---
 README                    |  4 +--
 setup.py                  |  2 +-
 src/bin/slingshot         | 26 +++++++--------
 src/slingshot/general.py  | 10 +++---
 src/slingshot/inputbox.py |  6 ++--
 src/slingshot/menu.py     | 60 ++++++++++++++++-----------------
 src/slingshot/network.py  | 12 +++----
 src/slingshot/particle.py | 70 +++++++++++++++++++--------------------
 src/slingshot/planet.py   | 36 ++++++++++----------
 src/slingshot/player.py   | 12 +++----
 src/slingshot/settings.py |  8 ++---
 11 files changed, 122 insertions(+), 124 deletions(-)

diff --git a/README b/README
index 9636bc9..75ef6be 100644
--- a/README
+++ b/README
@@ -19,8 +19,8 @@ v0.9:
 
 --- Requirements ---
 
-python 2.4 (or higher)			http://www.python.org/
-python-pygame 1.7.1 (or higher)		http://www.pygame.org/
+python 3.0 (or higher)			http://www.python.org/
+python-pygame 1.9.2 (or higher)		http://www.pygame.org/
 
 
 --- Installation ---
diff --git a/setup.py b/setup.py
index 92072b6..db6b69d 100755
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/env python3
 # Copyright (C) 2010 Ryan Kavanagh <ryanakca@kubuntu.org>
 #
 # Slingshot is free software; you can redistribute it and/or modify
diff --git a/src/bin/slingshot b/src/bin/slingshot
index 68185fb..6a44b89 100644
--- a/src/bin/slingshot
+++ b/src/bin/slingshot
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/env python3
 #    This file is part of Slingshot.
 #
 # Slingshot is a two-dimensional strategy game where two players attempt to shoot one
@@ -37,7 +37,7 @@ import math
 import os
 import sys
 import time
-import thread
+import _thread as thread
 
 from random import randint
 
@@ -349,10 +349,10 @@ class Game:
     def create_particlesystem(self, pos, n, size):
         if Settings.PARTICLES:
             if Settings.BOUNCE:
-                nn = n / 2
+                nn = n // 2
             else:
                 nn = n
-            for i in xrange(nn):
+            for i in range(nn):
                 self.particlesystem.add(Particle(pos, size))
 
     def create_planets(self, planetlist=None):
@@ -361,13 +361,13 @@ class Game:
         if planetlist is None:
             if Settings.MAX_BLACKHOLES > 0:
                 n = randint(1, Settings.MAX_BLACKHOLES)
-                for i in xrange(n):
+                for i in range(n):
                     result.add(Blackhole(result, self.background))
             else:
                 # Only have planets if we don't have any
                 # blackholes.
                 n = randint(2, Settings.MAX_PLANETS)
-                for i in xrange(n):
+                for i in range(n):
                     result.add(Planet(result, self.background))
         else:
             for p in planetlist:
@@ -414,7 +414,7 @@ class Game:
         zoom_screen.blit(normal_screen, (200, 150))
 
         missilesprite = self.missile.get_image()
-        missilesprite = pygame.transform.scale(missilesprite, (missilesprite.get_size()[0] / 3, missilesprite.get_size()[1] / 3))
+        missilesprite = pygame.transform.scale(missilesprite, (missilesprite.get_size()[0] // 3, missilesprite.get_size()[1] // 3))
         pos = self.missile.get_pos()
         pos = (200 + pos[0] / 4 - missilesprite.get_width() / 2, 150 + pos[1] / 4 - missilesprite.get_height() / 2)
         zoom_screen.blit(missilesprite, pos)
@@ -698,7 +698,7 @@ class Game:
             offset1 = 0
 
         power_penalty = self.missile.get_score()
-        for i in xrange(1, 3):
+        for i in range(1, 3):
             if self.players[i].shot:
                 if self.player == 3 - i:
                     message = "Player %d killed self" % (i)
@@ -939,7 +939,7 @@ class Game:
         if not os.path.exists(path):
             os.mkdir(path)
         path += "/settings"
-        f = file(path, 'wt')
+        f = open(path, 'wt')
         if self.bounce:
             f.write("Bounce: 1\n")
         else:
@@ -1092,11 +1092,11 @@ class Game:
             self.net.close()
         return ret
 
-        def use_fullscreen(self):
-                pygame.display.set_mode((0, 0), pygame.FULLSCREEN | pygame.NOFRAME)
+    def use_fullscreen(self):
+        pygame.display.set_mode((0, 0), pygame.FULLSCREEN | pygame.NOFRAME)
 
-        def use_window(self):
-                pygame.display.set_mode((800, 600))
+    def use_window(self):
+        pygame.display.set_mode((800, 600))
 
 
 def main():
diff --git a/src/slingshot/general.py b/src/slingshot/general.py
index e6b6c22..ddea114 100644
--- a/src/slingshot/general.py
+++ b/src/slingshot/general.py
@@ -30,12 +30,12 @@
 from slingshot.settings import Settings
 
 def load_image(name, colorkey=None):
-        fullname = os.path.join(Settings.DATA_PATH, name)
+	fullname = os.path.join(Settings.DATA_PATH, name)
 	try:
 		image = pygame.image.load(fullname)
-	except pygame.error, message:
-		print 'Cannot load image:', fullname
-		raise SystemExit, message
+	except pygame.error as message:
+		print('Cannot load image:', fullname)
+		raise SystemExit(message)
 	image = image.convert_alpha()
 	if colorkey is not None:
 		if colorkey is -1:
@@ -87,7 +87,7 @@ def get_intersect(center, r, pos1, pos2):
 	return pos
 
 def get_data_path(file):
-        return os.path.join(Settings.DATA_PATH, file)
+	return os.path.join(Settings.DATA_PATH, file)
 
 def prep_text(text, antialias, font, linespacing, color):
         '''
diff --git a/src/slingshot/inputbox.py b/src/slingshot/inputbox.py
index e6012e7..1dd22f5 100644
--- a/src/slingshot/inputbox.py
+++ b/src/slingshot/inputbox.py
@@ -33,7 +33,7 @@ def __init__(self, screen, question):
 		self.screen = screen
 		self.question = question
 		self.new_str = []
-		self.input_box(question + ": " + string.join(self.new_str,""))
+		self.input_box(question + ": " + "".join(self.new_str))
 
 	def input_box(self, msg):
 		pygame.draw.rect(self.screen, (0,0,0),
@@ -61,8 +61,8 @@ def ask(self):
 				return False
 			elif key <= 127 and len(self.new_str) < 19:
 				self.new_str.append(chr(key))
-			self.input_box(self.question + ": " + string.join(self.new_str,""))
-		return string.join(self.new_str,"")
+			self.input_box(self.question + ": " + "".join(self.new_str))
+		return "".join(self.new_str)
 
 	def get_key(self):
 		while 1:
diff --git a/src/slingshot/menu.py b/src/slingshot/menu.py
index 04a6d24..7b1e30e 100644
--- a/src/slingshot/menu.py
+++ b/src/slingshot/menu.py
@@ -35,10 +35,10 @@ def __init__(self, name, dim = True, copyright = False):
 		self.dim = dim
 		self.count = 0
 		self.inc = 15
-                self.copyright = copyright
+		self.copyright = copyright
 
 	def change_active(self, item, a):
-		for i in xrange(0, self.items.__len__()):
+		for i in range(0, self.items.__len__()):
 			if self.items[i][0] == item:
 				self.items[i] = (self.items[i][0], self.items[i][1], self.items[i][2], a)
 
@@ -100,8 +100,8 @@ def draw(self):
 		result = pygame.Surface((w, h))
 		#result.fill((100,0,0))
 		result.blit(Settings.menu_background, (0,0))
-                if self.copyright:
-                        for line, (x, y) in prep_text([
+		if self.copyright:
+			for line, (x, y) in prep_text([
 "Slingshot is:",
 "    Copyright (C) 2007 Jonathan Musther <jmusther@gmail.com>",
 "    Copyright (C) 2007 Bart Mak",
@@ -123,14 +123,13 @@ def draw(self):
 "Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA",
 "",
 "http://github.com/ryanakca/slingshot"],
-                                True, Settings.fineprint, 0, (10, 10, 10)):
-                            # We want our text to start at 20px from the left
-                            # side and 305 px from the top.
-                            result.blit(line, (20, 305 + y))
-                version = Settings.fineprint.render(
-                        'Version '+ Settings.VERSION, True,
-                                                    (230, 230, 230))
-                result.blit(version, (345 - version.get_width(), 3))
+					True, Settings.fineprint, 0, (10, 10, 10)):
+					# We want our text to start at 20px from the left
+					# side and 305 px from the top.
+					result.blit(line, (20, 305 + y))
+		version = Settings.fineprint.render(
+			'Version '+ Settings.VERSION, True, (230, 230, 230))
+		result.blit(version, (345 - version.get_width(), 3))
 
 		txt = Settings.menu_font.render(self.name, 1, (255,255,255))
 		rect = txt.get_rect()
@@ -138,7 +137,7 @@ def draw(self):
 		result.blit(txt, rect.topleft)
 
 		n = self.items.__len__()
-		for i in xrange(0, n):
+		for i in range(0, n):
 			if i == self.selected:
 				color = (self.count,self.count,255)
 			else:
@@ -191,24 +190,23 @@ class Welcome(Menu):
 
 	def __init__(self):
 		Menu.__init__(self, "")
-                self.img = pygame.surface.Surface((600, 300), pygame.SRCALPHA)
+		self.img = pygame.surface.Surface((600, 300), pygame.SRCALPHA)
 		self.choice = ""
-                # header font
-                hfont = pygame.font.Font(get_data_path("FreeSansBold.ttf"), 40)
-                header = prep_text(["Welcome to Slingshot!"], True, hfont,
-                                 0, (255, 255, 255))[0]
-                self.img.blit(header[0],
-                              ((self.img.get_width() - header[1][0]) / 2, 0)
-                             )
-                # Instructions font
-                ifont = pygame.font.Font(get_data_path("FreeSansBold.ttf"), 15)
-                instructions = prep_text(
-                    ["Press space to play or escape for the menu and help!"],
-                    True, ifont, 0, (255, 255, 255))[0]
-                self.img.blit(instructions[0],
-                          ((self.img.get_width() - instructions[1][0]) / 2, 60)
-                             )
-                for line, (x, y) in prep_text([
+		# header font
+		hfont = pygame.font.Font(get_data_path("FreeSansBold.ttf"), 40)
+		header = prep_text(["Welcome to Slingshot!"], True, hfont, 0, (255, 255, 255))[0]
+		self.img.blit(header[0],
+					  ((self.img.get_width() - header[1][0]) / 2, 0)
+					  )
+		# Instructions font
+		ifont = pygame.font.Font(get_data_path("FreeSansBold.ttf"), 15)
+		instructions = prep_text(
+			["Press space to play or escape for the menu and help!"],
+			True, ifont, 0, (255, 255, 255))[0]
+		self.img.blit(instructions[0],
+					  ((self.img.get_width() - instructions[1][0]) / 2, 60)
+					  )
+		for line, (x, y) in prep_text([
 "Slingshot is:",
 "    Copyright (C) 2007 Jonathan Musther <jmusther@gmail.com>",
 "    Copyright (C) 2007 Bart Mak",
@@ -326,7 +324,7 @@ def draw(self):
 			rect.midtop = (w / 2, Settings.MENU_LINEFEED + offset)
 			result.blit(txt, rect.topleft)
 
-		for i in xrange(0, 2):
+		for i in range(0, 2):
 			if i == self.selected:
 				color = (self.count,self.count,255)
 			else:
