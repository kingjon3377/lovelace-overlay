--- perforate-1.2.orig/zum.c
+++ perforate-1.2/zum.c
@@ -2,6 +2,13 @@
  * zum 1.00 - free more disk space by making holes in files.
  *
  * Oleg Kibirev * April 1995 * oleg@gd.cs.CSUFresno.EDU
+ * 2005-11-11: Wouter Verhelst <wouter@debian.org>: clean up the code a bit (so
+ * 	that it no longer produces any warnings, add large file support.
+ *
+ * 2006-03-10: Arnaud Fontaine <arnau@hurdfr.org>: replace fgets by
+ * getline in main function (we use dynamic memory allocation instead
+ * of MAXPATHLEN macro which doesn't exist on Debian GNU/Hurd and
+ * optional in POSIX).
  *
  * This code is covered by General Public License, version 2 or any later
  * version of your choice. You should recieve file "COPYING" which contains
@@ -9,7 +16,12 @@
  * have it, a copy is available from ftp.gnu.ai.mit.edu.
  */
 
+#define _FILE_OFFSET_BITS 64
+#define _LARGEFILE_SOURCE
+#define _GNU_SOURCE
+
 #include <stdio.h>
+#include <string.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/file.h>
@@ -20,15 +32,67 @@
 #include <utime.h>
 #include <alloca.h>
 #include <unistd.h>
+#include <stdlib.h>
 
 extern int errno;
 
+/* GLibc provides getline, which allocate automatically the right
+   amount for the line, read by *stream. If not available, use
+   ours. */
+#ifdef __GLIBC__
+# define my_getline getline
+#else
+# define GETLINE_CHUNK_SIZE 4096
+
+static ssize_t my_getline(char **lineptr, size_t *n, FILE *stream)
+{
+  if(lineptr == NULL || n == NULL)
+    {
+      errno = EINVAL;
+      return -1;
+    }
+
+  if(*n == 0)
+    {
+      *lineptr = malloc(sizeof (char *) * GETLINE_CHUNK_SIZE);
+      *n = GETLINE_CHUNK_SIZE;
+    }
+
+  char *ret = fgets (*lineptr, *n, stream);
+  while(ret != NULL && (*lineptr)[strlen (*lineptr) - 1] != '\n')
+    {
+      *n += GETLINE_CHUNK_SIZE;
+      *lineptr = realloc(*lineptr, sizeof (char *) * *n);
+
+      ret = fgets(*lineptr + strlen (*lineptr), GETLINE_CHUNK_SIZE, stream);
+    }
+
+  return (ret ? strlen (*lineptr) : -1);
+}
+#endif /* !__GLIBC__ */
+
 static char suffix[] = "__zum__";
 
-static int zero_copy(int fds, int fdd, int size)
+static void* my_mmap(void *ptr, int fd, off_t size, off_t *pos)
+{
+  if(size-(*pos) > (off_t)1<<30) {
+    size=1<<30;
+  } else {
+    size=size-(*pos);
+  }
+  if(ptr)
+    munmap(ptr, 1<<30);
+  ptr=mmap(NULL, size, PROT_READ, MAP_PRIVATE, fd, (*pos));
+  (*pos)+=size;
+  return ptr;
+}
+
+static int zero_copy(int fds, int fdd, off_t size)
 {
   char *ms;
   char *bp, *p, *ep;
+  off_t pos=0;
+  int offset;
   
   lseek(fdd, 0L, SEEK_SET);
   if(ftruncate(fdd, 0) < 0) {
@@ -36,23 +100,33 @@
     return -1;
   }
   
-  if((ms = mmap(NULL, size, PROT_READ, MAP_PRIVATE, fds, 0)) == -1) {
+  offset = (size > 1<<30) ? 1<<30 : size;
+  if((ms = my_mmap(NULL, fds, size, &pos)) == MAP_FAILED) {
     perror("mmap");
     return -1;
   }
 
-  p = ms; ep = ms + size;
+  p = ms; ep = ms + offset;
   
   while(p < ep) {
     for(bp = p; p < ep && *p; p++);
     if(p != bp && write(fdd, bp, p-bp) != p-bp) {
 	perror("write");
-	munmap(ms, size);
+	munmap(ms, offset);
 	return -1;
       }
     for(bp = p; p < ep && !*p; p++);
     if(p != bp)
       lseek(fdd, p-bp, SEEK_CUR);
+    if((p == ep) && (size > 1<<30) && (size != pos)) {
+      offset = ((size - pos) > 1<<30) ? 1<<30 : (size - pos);
+      if((ms = my_mmap(ms, fds, size, &pos)) == MAP_FAILED) {
+	perror("mmap");
+	return -1;
+      } else {
+	p = ms; ep = ms + offset;
+      }
+    }
   }
   munmap(ms, size);
   return ftruncate(fdd, size);
@@ -102,7 +176,7 @@
     return;
   }
 
-  printf(" [%uK] ", (st.st_blocks-std.st_blocks)*st.st_blksize/1024);
+  printf(" [%uK] ", (unsigned int)((st.st_blocks-std.st_blocks)*st.st_blksize/1024));
   fflush(stdout);
 
   if(st.st_nlink == 1) {
@@ -141,17 +215,21 @@
   }
 }
 
-main(int argc, char **argv)
+int main(int argc, char **argv)
 {
   char *p;
 
   if(argc > 1)
-    while(p = *(++argv))
+    while((p = *(++argv)))
       zero_unmap(p);
   else {
-    char buf[MAXPATHLEN];
-    while(gets(buf))
+    char *buf = NULL;
+    size_t len = 0;
+    while(my_getline(&buf, &len, stdin) != -1)
       zero_unmap(buf);
+    
+    if (buf)
+      free(buf);
   }
   return 0;
 }
--- perforate-1.2.orig/finddup
+++ perforate-1.2/finddup
@@ -1,6 +1,6 @@
 #! /usr/bin/perl
 #
-# finddup 2.0 - find identical files and do somethink with it.
+# finddup 2.0 - find identical files and do something with them.
 #
 
 use strict;
@@ -17,14 +17,15 @@
 *dir    = *File::Find::dir;
 *prune  = *File::Find::prune;
 
-use vars qw($RCS_VERSION $VERSION $opt %filelist %md5list);
+use vars qw($RCS_VERSION $VERSION @dir $opt %filelist %md5list);
 
 sub wanted;
+sub insert_md5;
 
-$RCS_VERSION = '$Id: finddup,v 2.2 2005/02/06 12:21:02 klaus Exp $';
-($VERSION = '$Revision: 2.2 $') =~ s/^\D*([\d.]*)\D*$/$1/;
+$RCS_VERSION = '$Id: finddup,v 2.3 2005/02/06 18:57:42 klaus Exp $';
+($VERSION = '$Revision: 2.3 $') =~ s/^\D*([\d.]*)\D*$/$1/;
 
-GetOptions($opt = {}, qw(help|h man version noaction|n verbose|v quiet|q link|l oldresult|o)) || pod2usage 2;
+GetOptions($opt = {}, qw(help|h man version noaction|n ignore-perms|i verbose|v quiet|q link|l oldresult|o dir=s@)) || pod2usage 2;
 pod2usage(1) if $opt->{help};
 pod2usage(-exitstatus => 0, -verbose => 2) if $opt->{man};
 if ($opt->{version}) { print "Version: $VERSION\n"; exit 0; }
@@ -33,8 +34,14 @@
 $opt->{link} = 1 if not exists $opt->{link} and $0 =~ /^(.*\/)?nodup(.pl)?$/;
 $opt->{oldresult} = 1 if not exists $opt->{oldresult} and $0 =~ /^(.*\/)?nodup(.pl)?$/;
 
+my @dir = @{$opt->{dir}} if ($opt->{dir});
+if (scalar(@dir) eq 0) {
+	push @dir, '.';
+}
+
 if ($opt->{oldresult})
 {
+   my $md5 = 0; # This is not really necessary in this mode, so make this faster
    while (<>)
    {
       chomp;
@@ -42,43 +49,45 @@
       my $size = $1;
       s/'$//;
       my @files = split(/' '/);
-      open IN, "<", $files[0];
-      my $md5 = Digest::MD5->new->addfile(*IN)->hexdigest;
-      close IN;
-      $md5list{$md5} = [[$size, \@files]];
+      # Patch by Philipp Matthias Hahn <pmhahn@debian.org>
+      # http://bugs.debian.org/356515
+      # $md5list{$md5++} = [[$size, \@files]];
+      $md5list{$md5++} = [[$size, 0, 0, 0, \@files]];
    } # while (<>)
 } # if ($opt->{oldresult})
 else
 {
    # Traverse desired filesystems
-   File::Find::find({wanted => \&wanted}, '.');
+   File::Find::find({wanted => \&wanted}, @dir);
+
+   my ($prev, $prev2) = ([-1], [-2]);
 
-   # Now calculate all md5sums. Afterwards %filelist can be freed.
-   foreach (sort {$a->[1]->[0] cmp $b->[1]->[0]} values(%filelist))
+   # Now calculate md5sums for each file that has another file of the same
+   # size. Afterwards %filelist can be freed.
+   foreach (sort {$a->[0] cmp $b->[0]} values(%filelist))
    {
-      open IN, "<", $_->[1]->[0];
-      my $md5 = Digest::MD5->new->addfile(*IN)->hexdigest;
-      close IN;
-      $md5list{$md5} = [] unless exists $md5list{$md5};
-      push @{$md5list{$md5}}, $_;
-   }
+      insert_md5($prev) if $_->[0] == $prev->[0] || $prev->[0] == $prev2->[0];
+      $prev2 = $prev;
+      $prev = $_;
+   } # foreach (sort {$a->[1]->[0] cm...
+   insert_md5($prev) if $prev->[0] == $prev2->[0];
    %filelist = ();
 } # if ($opt->{oldresult}) { ... }...
 
 # Now we can output doubles sorted by size
 foreach (sort {$md5list{$b}->[0]->[0] <=> $md5list{$a}->[0]->[0]} keys(%md5list))
 {
-   next unless @{$md5list{$_}} > 1; # This file is single
+   next unless @{$md5list{$_}} > 1 or $opt->{oldresult}; # This file is single
    my $size = $md5list{$_}->[0]->[0];
    if ($size) # Do not output empty files
    {
       if ($opt->{link})
       {
-	 my $reffile = shift @{$md5list{$_}->[0]->[1]}; # Remove the first file to not unlink them
+	 my $reffile = shift @{$md5list{$_}->[0]->[4]}; # Remove the first file to not unlink them
 	 print "Länge: $size Files:\t$reffile\n" if $opt->{verbose};
 	 foreach (@{$md5list{$_}})
 	 {
-	    foreach (@{$_->[1]})
+	    foreach (@{$_->[4]})
 	    {
 	       print "\t\t\t$_\n" if $opt->{verbose};
 	       unless ($opt->{noaction})
@@ -95,7 +104,7 @@
 	 print "$size" unless $opt->{quiet};
 	 foreach (@{$md5list{$_}})
 	 {
-	    foreach (@{$_->[1]})
+	    foreach (@{$_->[4]})
 	    {
 	       print " '$_'" unless $opt->{quiet};
 	    }
@@ -114,8 +123,25 @@
 
    if ((($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size) = lstat($_)) && !($File::Find::prune |= ($dev != $File::Find::topdev)) && -f _)
    {
-      $filelist{$ino} = [$size, []] unless exists $filelist{$ino};
-      push @{$filelist{$ino}->[1]}, $name;
+      $filelist{$ino} = [$size, $mode, $uid, $gid, []] unless exists $filelist{$ino};
+      push @{$filelist{$ino}->[4]}, $name;
+   }
+}
+
+sub insert_md5
+{
+   my $file = shift;
+   if (open(IN, "<", $file->[4]->[0]))
+   {
+      my $md5 = Digest::MD5->new->addfile(*IN)->hexdigest;
+      $md5 .= "\t".$file->[1]."\t".$file->[2]."\t".$file->[3] unless $opt->{'ignore-perms'};
+      close IN;
+      $md5list{$md5} = [] unless exists $md5list{$md5};
+      push @{$md5list{$md5}}, $file;
+   }
+   else
+   {
+      warn "Cannot open File '" . $file->[4]->[0] . "'";
    }
 }
 
@@ -123,7 +149,7 @@
 
 =head1 NAME
 
-finddup - Find identical files and do somethink with it
+finddup - Find identical files and do something with them
 
 =head1 SYNOPSIS
 
@@ -135,8 +161,10 @@
  -n, --noaction         do just nothing, just print out (implies -v)
  -v, --verbose          just what the name says
  -q, --quiet            be quiet
- -l, --link		link the identical files together
- -o, --oldresult	Use the old output of this script
+ -l, --link	        link the identical files together
+ -o, --oldresult        Use the old output of this script
+ -i, --ignore-perms     Don't check that file owner and permissions match
+ -d, --dir              Define the dir to check (you may specify more than one)
 
 =head1 DESCRIPTION
 
@@ -166,15 +194,15 @@
 
 =item
 
-Handle if the files allready have other hardlinks to it in the same tree
+Handle files that already have other hardlinks in the same tree
 
 =item
 
-Several improbvements
+Several improvements
 
 =back
 
-If started as nodup or nodup.pl the script will act like started with optiones --link and
+If started as nodup or nodup.pl the script will act like started with options --link and
 --oldresult
 
 =head1 COPYRIGHT
@@ -204,6 +232,12 @@
 =head1 HISTORY
 
  $Log: finddup,v $
+ Revision 2.3  2005/02/06 18:57:42  klaus
+ * Make --oldresult faster by not calculating the md5sum again
+ * Fix a but that with --oldresult no links will be done cause the internal
+   datastructure
+ * Do handle errors in open for md5sum calculation
+
  Revision 2.2  2005/02/06 12:21:02  klaus
  Little but important bug in link routine.
 
--- perforate-1.2.orig/README.perforate
+++ perforate-1.2/README.perforate
@@ -12,21 +12,21 @@
 
 	find / -xdev -type f -print | zum
 
-	It should work find under  Linux. If it  runs  out of disk space  when
-processing files (it has to  make a copy  of each  before replacing it),  just
-Ctrl-C and delete  all  files that end  with  __zum__ (eq  find / -xdev  -name
-'*__zum__' -print | xargs rm).  After you free some space, it's safe to run it
-from the beginning  one more time.  Nevertheless shell scripts in this package
-modify your  files  and I am  not  responsible for anything that  might happen
+	It should work find under Linux. If it runs out of disk space when
+processing files (it has to make a copy of each before replacing it), just
+Ctrl-C and delete all files that end with __zum__ (eq find / -xdev -name
+'*__zum__' -print | xargs rm). After you free some space, it's safe to run it
+from the beginning one more time. Nevertheless shell scripts in this package
+modify your files and I am not responsible for anything that might happen
 (hey, you have source code!)
 
-	By  the  way, don't  try to do  this on   other UNIX varieties without
-preliminary investigation. For  example,  SunOS can't  boot from  vmlinux with
-holes (it's  Ok  to zum shared   libraries however, because  I unlink programs
+	By the way, don't try to do this on other UNIX varieties without
+preliminary investigation. For example, SunOS can't boot from vmlinux with
+holes (it's Ok to zum shared libraries however, because I unlink programs
 before overwriting them).
 
-	While I was    at  it, I wrote    some   more scripts  to  save   disk
-space. finddup  finds all the duplicate files  in a subtree rooted  in current
+	While I was at it, I wrote some more scripts to save disk
+space. finddup finds all the duplicate files in a subtree rooted in current
 directory. Run it as:
 
 	
@@ -34,7 +34,7 @@
 	/some/dir/finddup > /tmp/duplist
 
 	
-	It takes quite a while to run. At  the end, /tmp/duplist has groups of
+	It takes quite a while to run. At the end, /tmp/duplist has groups of
 duplicate files sorted in the order of decreasing size (so you can look at the
 most interesting ones first). They can be merged with hard links:
 
@@ -42,29 +42,29 @@
 	/some/dir/nodup < /tmp/duplist
 
 
-	However you shouldn't merge all of  them. Instead edit the duplist and
-see what they  are.    For example, /root/.zshenv  and   /home/snowcat/.zshenv
-shouldn't be merged even if  they are identical, because  in future I may want
-to   edit my  .zshenv  without  changing   root's setup. Likewise,  don't link
+	However you shouldn't merge all of them. Instead edit the duplist and
+see what they are. For example, /root/.zshenv and /home/snowcat/.zshenv
+shouldn't be merged even if they are identical, because in future I may want
+to edit my .zshenv without changing root's setup. Likewise, don't link
 /etc/nntpserver and /usr/adm/messages even if both consist of a single newline
 character. 
 
-	Finally,  findstrip will find all unstripped  files  and write them to
-stdout, line by line.  Remember that you can  strip only real executables, but
-not shared  libraries, objects and some other  things like .do files in Andrew
-toolkit. findstrip filters out everything I know  about, but if you don't edit
+	Finally, findstrip will find all unstripped files and write them to
+stdout, line by line. Remember that you can strip only real executables, but
+not shared libraries, objects and some other things like .do files in Andrew
+toolkit. findstrip filters out everything I know about, but if you don't edit
 the list before stripping it, you are quite likely to get in trouble.
 
 
 	On full Slackware 2.2 distribution (w/o Tex), these 3 scripts together
 can save about 15M. It may be not much but at least it's free and doesn't have
-any performance  penalty :)    Anyone  willing to  include  them  as  part  of
+any performance penalty :) Anyone willing to include them as part of
 installation process?
 
 	Also, it's useful to make holes in files on rescue floppies.
 
 				Oleg Kibirev <oleg@gd.cs.CSUFresno.EDU>
 
-PS:  tzx is covered  by GPL unless someone can  give  me a compeling reason to
+PS: tzx is covered by GPL unless someone can give me a compeling reason to
 relax restrictions.
 
