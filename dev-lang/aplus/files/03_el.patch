--- aplus-fsf-4.22.1.orig/src/lisp.1/aplus.el
+++ aplus-fsf-4.22.1/src/lisp.1/aplus.el
@@ -26,16 +26,16 @@
 
 ;; 
 ;;
-(defvar aplus-set-load-path t
+(defvar aplus-set-load-path nil
   "*Non-nil means set the load-path for the user.")
 
-(if aplus-set-load-path
-    (setq load-path 
-	  (append 
-	   '("/usr/local/aplus-fsf-4.20/lisp.1") load-path 
-	   )	
-	  ))
-;;
+;; (if aplus-set-load-path
+;;     (setq load-path 
+;; 	  (append 
+;; 	   '("/usr/local/aplus-fsf-4.22/lisp.1") load-path 
+;; 	   )	
+;; 	  ))
+
 ;; Load Aplus and set defaults
 ;;
 (defvar aplus-setup-global-bindings t
@@ -47,7 +47,7 @@
 (require 'a-font)
 (require 'keyb)
 (require 'a)
-(setq a-prog "/usr/local/bin/a+")
+(setq a-prog "a+")
 (setq a-plus t)
 
 (cond ((file-readable-p "~/.custom/a-options.el")
--- aplus-fsf-4.22.1.orig/src/lisp.1/a.el
+++ aplus-fsf-4.22.1/src/lisp.1/a.el
@@ -866,23 +866,13 @@
     (cond (tuple (setcdr tuple value))
 	  (t (nconc alist (list (cons key value)))))))
 
-;; +++ a-mode seems better.  Also, why .z and .+?
-(change-assoc "\\.apl$" 'a-mode auto-mode-alist)
-(change-assoc "\\.a$" 'a-mode auto-mode-alist)
-(change-assoc "\\.\\+$" 'a-mode auto-mode-alist)
-; (change-assoc "\\.z$" 'a-mode auto-mode-alist)
+(change-assoc "\\.apl$" 'a-minor-mode auto-mode-alist)
+(change-assoc "\\.a$" 'a-minor-mode auto-mode-alist)
+(change-assoc "\\.\\+$" 'a-minor-mode auto-mode-alist)
 
 
 (defvar a-prog-default "a+")
-(defvar a-path-default "/usr/local/lib/aplus-")
-
-;(cond ((string-equal (getenv "SYS_FIRIS") "FID")
-;       (defvar a-path-default "/usr/local/a+_")
-;       )
-;      ((string-equal (getenv "SYS_FIRIS") "IS" )
-;       (defvar a-path-default "/ms/dist/aplus/PROJ/aplus/")
-;       )
-;)
+(defvar a-path-default "/usr/lib/")
 
 (defun toggle-a-prog (arg)
   (interactive "P")
--- aplus-fsf-4.22.1.orig/src/lisp.1/keyb.el
+++ aplus-fsf-4.22.1/src/lisp.1/keyb.el
@@ -26,6 +26,16 @@
 
 (defvar a-key-string nil "Apl characters corresponding to raw keyboard input")
 
+(defvar a-modifier-list '(super)
+  "List of modifiers of a key to send the Apl character.")
+
+(defun a-insert-map (akeydef)
+  (let ((key (car akeydef))
+	(apl (cdr akeydef)))
+    (define-key a-minor-map (append a-modifier-list (list key)) 'a-self-insert)
+    (define-key a-minor-map (vector '(control c) key) 'a-self-insert)
+    (aset a-key-string (char-to-int key) apl)))
+
 (defun a-self-insert (n)
   (interactive "p")
   (or n (setq n 1))
@@ -34,159 +44,151 @@
     (setq last-command-char (aref a-key-string (char-to-int key)))
     (self-insert-command n)))
 
-(defvar a-minor-map nil)
-(if a-minor-map nil
-  (setq a-minor-map (make-sparse-keymap))
-  (setq a-key-string (make-string 256 ?\000))
-  (let ((n 32))
-    (while (< n 256)
-      (aset a-key-string n n)
-      (setq n (1+ n))))
+(setq a-minor-map (make-sparse-keymap))
+(setq a-key-string (make-string 256 ?\000))
+(let ((n 32))
+  (while (< n 256)
+    (aset a-key-string n n)
+    (setq n (1+ n))))
+(mapcar 'a-insert-map
+	'((?a . ?\301) ; A (2)
+	  (?b . ?\302) ; B
+	  (?c . ?\303) ;
+	  (?d . ?\304) ; D
+	  (?e . ?\305) ;
+	  (?f . ?_)    ; _
+	  (?g . ?\307) ; G
+	  (?h . ?\310) ; H
+	  (?i . ?\311) ;
+	  (?j . ?\312) ; J
+	  (?k . ?\')   ; '
+	  (?l . ?\314) ; L
+	  (?m . ?|)    ; |
+	  (?n . ?\316) ; N
+	  (?o . ?\317) ;
+	  (?p . ?\*)   ; *
+	  (?q . ?\?)   ; ?
+	  (?r . ?\322) ; R
+	  (?s . ?\323) ;
+	  (?t . ?\~)   ; ~
+	  (?u . ?\325) ;
+	  (?v . ?\326) ; V
+	  (?w . ?\327) ; W (1)
+	  (?x . ?\330) ;
+	  (?y . ?\331) ;
+	  (?z . ?\332) ;
+	  (?1 . ?\241) ; !
+	  (?2 . ?\242) ;
+	  (?3 . ?<)    ; <
+	  (?4 . ?\244) ; $
+	  (?5 . ?=)    ; =
+	  (?6 . ?\246) ;
+	  (?7 . ?>)    ; >
+	  (?8 . ?\250) ; (
+	  (?9 . ?\251) ; )
+	  (?0 . ?^)    ; ^
+	  (?- . ?\253) ; +
+	  (?= . ?\337) ;
+	  (?\\ . ?\334);
+	  (?` . ?\376) ; ~
+	  (?, . ?\254) ; ,
+	  (?[ . ?\373) ; {
+	  (?] . ?\375) ; }
+	  (?\; . ?\333) ; [
+	  (?' . ?\335) ;
+	  (?. . ?\334) ;
+	  (?/ . ?\257) ; /
+	  (?! . ?\340) ; `
+	  (?@ . ?\346) ;
+	  (?# . ?\347) ;
+	  (?$ . ?\350) ; h
+	  (?% . ?\367) ; w (1)
+	  (?^ . ?\364) ; t
+	  (?& . ?\341) ; a (2)
+	  (?* . ?\360) ; p
+	  (?\( . ?\271); 9
+	  (?\) . ?\260); 0
+	  (?_ . ?!)    ; !
+	  (?+ . ?\255) ; -
+	  (?| . ?\374) ; | (check syntax table entry!)
+	  (?O . ?\357) ;
+	  (?J . ?\352) ;
+	  (?F . ?\275) ; =
+	  (?E . ?\345) ; e
+	  (?I . ?\351) ; i
+	  (?{ . ?\335) ;
+	  (?} . ?\333) ; [
+	  (?S . ?\276) ; >
+	  (?G . ?\347) ;
+	  (?H . ?\350) ; h
+	  (?L . ?\354) ; l
+	  (?: . ?\274) ;
+	  (?\" . ?\273); ;
+	  (?C . ?\343) ; c
+	  (?B . ?\342) ; b
+	  (?N . ?\356) ; n
+	  (?M . ?\315) ;
+	  (?> . ?\256) ; . *** ???
+	  (?P . ?\263) ; 3
+	  (?Y . ?\264) ; 4
+	  (?Z . ?\372) ; z
+	  (?Q . ?\277) ;
+	  (?W . ?W)    ; W
+	  (?R . ?R)    ; R
+	  (?T . ?T)    ; T
+	  (?U . ?U)    ; U
+	  (?A . ?A)    ; A
+	  (?D . ?D)    ; D
+	  (?K . ?K)    ; K
+	  (?X . ?X)    ; X
+	  (?V . ?V)    ; V
+	  (?? . ?\?)   ; ?
+	  (?~ . ?~)    ; ~
+	  (?< . ?<)    ; <
+	  (?\040 . ?\040)
+	  ) ; end of translation table
+	) ; end of mapcar
+	  
+; if we are running off of a tty, window-system is nil
+; in such a case, we need to handle all those events that get passed
+; as escape sequences
+(if window-system nil
+  (global-unset-key "\C-h")
+  (global-set-key "\C-h" 'backward-delete-char) 
+  (define-key esc-map "[" nil)
+  (define-key esc-map "O" nil)
   (mapcar #'(lambda (akeydef)
 	      (let ((key (car akeydef))
 		    (apl (cdr akeydef)))
-		(define-key a-minor-map (list 'meta (- key 128)) 'a-self-insert)
-		(aset a-key-string (char-to-int key) apl)))
-	  '((?\M-a . ?\301) ; A (2)
-	    (?\M-b . ?\302) ; B
-	    (?\M-c . ?\303) ;
-	    (?\M-d . ?\304) ; D
-	    (?\M-e . ?\305) ;
-	    (?\M-f . ?_)    ; _
-	    (?\M-g . ?\307) ; G
-	    (?\M-h . ?\310) ; H
-	    (?\M-i . ?\311) ;
-	    (?\M-j . ?\312) ; J
-	    (?\M-k . ?\')   ; '
-	    (?\M-l . ?\314) ; L
-	    (?\M-m . ?|)    ; |
-	    (?\M-n . ?\316) ; N
-	    (?\M-o . ?\317) ;
-	    (?\M-p . ?\*)   ; *
-	    (?\M-q . ?\?)   ; ?
-	    (?\M-r . ?\322) ; R
-	    (?\M-s . ?\323) ;
-	    (?\M-t . ?\~)   ; ~
-	    (?\M-u . ?\325) ;
-	    (?\M-v . ?\326) ; V
-	    (?\M-w . ?\327) ; W (1)
-	    (?\M-x . ?\330) ;
-	    (?\M-y . ?\331) ;
-	    (?\M-z . ?\332) ;
-	    (?\M-1 . ?\241) ; !
-	    (?\M-2 . ?\242) ;
-	    (?\M-3 . ?<)    ; <
-	    (?\M-4 . ?\244) ; $
-	    (?\M-5 . ?=)    ; =
-	    (?\M-6 . ?\246) ;
-	    (?\M-7 . ?>)    ; >
-	    (?\M-8 . ?\250) ; (
-	    (?\M-9 . ?\251) ; )
-	    (?\M-0 . ?^)    ; ^
-	    (?\M-- . ?\253) ; +
-	    (?\M-= . ?\337) ;
-	    (?\M-\\ . ?\334);
-	    (?\M-` . ?\376) ; ~
-	    (?\M-, . ?\254) ; ,
-	    (?\M-[ . ?\373) ; {
-	    (?\M-] . ?\375) ; }
-	    (?\M-\; . ?\333) ; [
-	    (?\M-' . ?\335) ;
-	    (?\M-. . ?\334) ;
-	    (?\M-/ . ?\257) ; /
-	    (?\M-! . ?\340) ; `
-	    (?\M-@ . ?\346) ;
-	    (?\M-# . ?\347) ;
-	    (?\M-$ . ?\350) ; h
-	    (?\M-% . ?\367) ; w (1)
-	    (?\M-^ . ?\364) ; t
-	    (?\M-& . ?\341) ; a (2)
-	    (?\M-* . ?\360) ; p
-	    (?\M-\( . ?\271); 9
-	    (?\M-\) . ?\260); 0
-	    (?\M-_ . ?!)    ; !
-	    (?\M-+ . ?\255) ; -
-	    (?\M-| . ?\374) ; | (check syntax table entry!)
-	    (?\M-O . ?\357) ;
-	    (?\M-J . ?\352) ;
-	    (?\M-F . ?\275) ; =
-	    (?\M-E . ?\345) ; e
-	    (?\M-I . ?\351) ; i
-	    (?\M-{ . ?\335) ;
-	    (?\M-} . ?\333) ; [
-	    (?\M-S . ?\276) ; >
-	    (?\M-G . ?\347) ;
-	    (?\M-H . ?\350) ; h
-	    (?\M-L . ?\354) ; l
-	    (?\M-: . ?\274) ;
-	    (?\M-\" . ?\273); ;
-	    (?\M-C . ?\343) ; c
-	    (?\M-B . ?\342) ; b
-	    (?\M-N . ?\356) ; n
-	    (?\M-M . ?\315) ;
-	    (?\M-> . ?\256) ; . *** ???
-	    (?\M-P . ?\263) ; 3
-	    (?\M-Y . ?\264) ; 4
-	    (?\M-Z . ?\372) ; z
-	    (?\M-Q . ?\277) ;
-	    (?\M-W . ?W)    ; W
-	    (?\M-R . ?R)    ; R
-	    (?\M-T . ?T)    ; T
-	    (?\M-U . ?U)    ; U
-	    (?\M-A . ?A)    ; A
-	    (?\M-D . ?D)    ; D
-	    (?\M-K . ?K)    ; K
-	    (?\M-X . ?X)    ; X
-	    (?\M-V . ?V)    ; V
-	    (?\M-? . ?\?)   ; ?
-	    (?\M-~ . ?~)    ; ~
-	    (?\M-< . ?<)    ; <
-	    (?\M-\040 . ?\040)
+		(define-key esc-map key apl)
+		))
+	  '(
+	    ("[224z" . a-send-region)		; f1
+	    ("[225z" . a-send-line)		; f2
+	    ("[226z" . a-send-func)		; f3
+	    ("[227z" . a-other-window)	; f4
+	    ("[228z" . delete-other-windows)	; f5
+	    ("[229z" . other-window-or-pop)	; f6
+	    ("[230z" . next-buffer)		; f7
+	    ("[231z" . previous-buffer)	; f8
+	    ("[232z" . enlarge-window)	; f9
+	    ("[233z" . shrink-window)		; f10
+	    ("[209z" . print-buffer)		; PrintScreen
+	    ("[210z" . scroll-down-in-place)	; Scroll
+	    ("[5z" . scroll-down)		; pgup
+	    ("[216z" . scroll-down)		; pgup
+	    ("[6z" . scroll-up)		; pgdn
+	    ("[222z" . scroll-up)		; pgdn
+	    ("[214z" . beginning-of-line)	; home
+	    ("[220z" . end-of-line)		; end
+	    ("[2z" . overwrite-mode)		; insert
+	    ("OA" . previous-line)		; up-arrow
+	    ("OB" . next-line)		; down-arrow
+	    ("OC" . forward-char)		; right-arrow
+	    ("OD" . backward-char)		; left-arrow
 	    ) ; end of translation table
-	   ) ; end of mapcar
-	  
-   ;; if we are running off of a tty, window-system is nil
-   ;; in such a case, we need to handle all those events that get passed
-   ;; as escape sequences
-  (if window-system nil
-    (global-unset-key "\C-h")
-    (global-set-key "\C-h" 'backward-delete-char) 
-    (define-key esc-map "[" nil)
-    (define-key esc-map "O" nil)
-    (mapcar #'(lambda (akeydef)
-		(let ((key (car akeydef))
-		      (apl (cdr akeydef)))
-		  (define-key esc-map key apl)
-		  ))
-	    '(
-	      ("[224z" . a-send-region)		; f1
-	      ("[225z" . a-send-line)		; f2
-	      ("[226z" . a-send-func)		; f3
-	      ("[227z" . a-other-window)	; f4
-	      ("[228z" . delete-other-windows)	; f5
-	      ("[229z" . other-window-or-pop)	; f6
-	      ("[230z" . next-buffer)		; f7
-	      ("[231z" . previous-buffer)	; f8
-	      ("[232z" . enlarge-window)	; f9
-	      ("[233z" . shrink-window)		; f10
-	      ("[209z" . print-buffer)		; PrintScreen
-	      ("[210z" . scroll-down-in-place)	; Scroll
-	      ("[5z" . scroll-down)		; pgup
-	      ("[216z" . scroll-down)		; pgup
-	      ("[6z" . scroll-up)		; pgdn
-	      ("[222z" . scroll-up)		; pgdn
-	      ("[214z" . beginning-of-line)	; home
-	      ("[220z" . end-of-line)		; end
-	      ("[2z" . overwrite-mode)		; insert
-	      ("OA" . previous-line)		; up-arrow
-	      ("OB" . next-line)		; down-arrow
-	      ("OC" . forward-char)		; right-arrow
-	      ("OD" . backward-char)		; left-arrow
-	      ) ; end of translation table
-	    ) ; end of mapcar
-    ) ; end of if window-system nil
-) ; end of if a-minor-map
-
+	  ) ; end of mapcar
+  ) ; end of if window-system nil
 (define-key a-minor-map "\C-c\C-a" 'a)
 (define-key a-minor-map "\C-c\C-r" 'a-send-region)
 (define-key a-minor-map "\C-c\C-l" 'a-send-line)
@@ -205,9 +207,9 @@
 (define-key a-mode-map "\C-c\C-o" 'a-kill-output) 
 (define-key a-mode-map "\C-c\C-p" 'a-goto-last-input)
 (define-key a-mode-map "\C-c\C-m" 'a-recall-last-input)
-  
+
 (if (not (assq 'a-minor minor-mode-alist))
-	(setq minor-mode-alist (cons '(a-minor " A") minor-mode-alist)))
+    (setq minor-mode-alist (cons '(a-minor " A") minor-mode-alist)))
 
 (provide 'keyb)
 
--- aplus-fsf-4.22.1.orig/src/lisp.1/.emacs
+++ aplus-fsf-4.22.1/src/lisp.1/.emacs
@@ -1,3 +1,3 @@
-(load "/usr/local/aplus-fsf-4.18/lisp_new/aplus")
-;(load "/ms/dev/aplus/aplus/fsf/src/aplus-fsf-4.18/src/lisp.1/aplus")
+(load "/usr/local/aplus-fsf-4.22/lisp_new/aplus")
+;(load "/ms/dev/aplus/aplus/fsf/src/aplus-fsf-4.22/src/lisp.1/aplus")
 
--- aplus-fsf-4.22.1.orig/debian/aplus-fsf-el.emacsen-startup
+++ aplus-fsf-4.22.1/debian/aplus-fsf-el.emacsen-startup
@@ -0,0 +1,35 @@
+;; 
+;; /etc/xemacs21/site-start.d/50aplus-fsf-el.el
+;;
+;; Copyright (C) 2002, Neil Roeth <neil@debian.org>
+
+(let ((aplus-fsf-el-pkgdir (concat "/usr/share/"
+				   (symbol-name debian-emacs-flavor)
+				   "/site-lisp/aplus-fsf-el")))
+ (if (file-exists-p aplus-fsf-el-pkgdir)
+     (progn
+       (debian-pkg-add-load-path-item aplus-fsf-el-pkgdir)
+
+       ;; Following to override setting in aplus.el since load-path is
+       ;; properly set here on Debian systems
+       (defvar aplus-set-load-path nil)
+
+       ;; Pressing F4 will load A+ then start A+ in a new process buffer.
+       (autoload 'a-other-window "aplus"
+	 "Start A+ interpreter in an A+ process buffer")
+       (define-key global-map [f4] `a-other-window)
+
+       ;; Loading an A+ file will load A+.
+       (autoload 'a-minor-mode "aplus"
+	 "Minor mode for editing A+ code." t)
+       (defun change-assoc (key value alist)
+	 "usage: (change-assoc KEY VALUE ALIST)
+If ALIST contains KEY then replace the associated value with VALUE.
+Otherwise, associate KEY and VALUE in the alist"
+	 (let ((tuple (assoc key alist)))
+	   (cond (tuple (setcdr tuple value))
+		 (t (nconc alist (list (cons key value)))))))
+       (change-assoc "\\.apl$" 'a-minor-mode auto-mode-alist)
+       (change-assoc "\\.a$" 'a-minor-mode auto-mode-alist)
+       (change-assoc "\\.\\+$" 'a-minor-mode auto-mode-alist)
+)))
