From 66324a8b8b6763fd0aa88f1c7181b80176571182 Mon Sep 17 00:00:00 2001
From: Michael Hartl <mhartl@michaelhartl.com>
Date: Sun, 11 May 2025 08:00:07 -0700
Subject: [PATCH 3/4] Update tests to catch exceptions to remove deprecation
 warnings

---
 spec/spec_helper.rb                           |  1 -
 .../code_inclusion_spec.rb                    | 41 +++++++++++++------
 2 files changed, 29 insertions(+), 13 deletions(-)

diff --git a/spec/spec_helper.rb b/spec/spec_helper.rb
index 3b00ce0..ed3d7f8 100644
--- a/spec/spec_helper.rb
+++ b/spec/spec_helper.rb
@@ -15,7 +15,6 @@ Dir.glob(File.join(File.dirname(__FILE__), "./support/**/*.rb")).each do |f|
 end
 
 RSpec.configure do |config|
-  config.treat_symbols_as_metadata_keys_with_true_values = true
   config.run_all_when_everything_filtered = true
   config.filter_run :focus
   
diff --git a/spec/to_html/literal_environments/code_inclusion_spec.rb b/spec/to_html/literal_environments/code_inclusion_spec.rb
index 7e2f8ad..9a4ce0d 100644
--- a/spec/to_html/literal_environments/code_inclusion_spec.rb
+++ b/spec/to_html/literal_environments/code_inclusion_spec.rb
@@ -102,7 +102,11 @@ describe "full listing" do
       let(:args) { {filename: "badfile"} }
       subject { lambda { CodeInclusion::FullListing::File.new(args).lines } }
 
-      it { should raise_exception(CodeInclusion::RetrievalException) }
+      it "raises CodeInclusion::RetrievalException with correct message" do
+        expect { subject.call }.to raise_error(
+          CodeInclusion::RetrievalException
+        )
+      end
     end
 
   end
@@ -150,10 +154,13 @@ describe "full listing" do
       subject { lambda {
         CodeInclusion::FullListing::GitTag.new(args, FakeGitCmd.new).lines } }
 
-      it { should raise_exception(
-            CodeInclusion::RetrievalException,
-            "Tag 'badtag' does not exist."
-            ) }
+
+      it "raises CodeInclusion::RetrievalException with correct message" do
+        expect { subject.call }.to raise_error(
+          CodeInclusion::RetrievalException,
+          "Tag 'badtag' does not exist."
+        )
+      end        
     end
 
     context "repo does not exist" do
@@ -169,9 +176,12 @@ describe "full listing" do
       subject { lambda {
         CodeInclusion::FullListing::GitTag.new(args, FakeGitCmd.new).lines } }
 
-      it { should raise_exception(
-            CodeInclusion::RetrievalException,
-            "Repository 'baddir/.git' does not exist.") }
+      it "raises CodeInclusion::RetrievalException with correct message" do
+        expect { subject.call }.to raise_error(
+          CodeInclusion::RetrievalException,
+          "Repository 'baddir/.git' does not exist."
+        )
+      end
     end
 
     context "file does not exist" do
@@ -197,9 +207,12 @@ describe "full listing" do
       subject { lambda {
         CodeInclusion::FullListing::GitTag.new(args, FakeGitCmd.new).lines } }
 
-      it { should raise_exception(
-            CodeInclusion::RetrievalException,
-            "fatal: Path 'badfile' does not exist in 'goodtag'") }
+      it "raises CodeInclusion::RetrievalException with correct message" do
+        expect { subject.call }.to raise_error(
+          CodeInclusion::RetrievalException,
+          "fatal: Path 'badfile' does not exist in 'goodtag'"
+        )
+      end            
     end
 
   end
@@ -231,7 +244,11 @@ describe "subset" do
       let(:args) { {section: "missing section name"} }
       subject { lambda {CodeInclusion::Subset::Section.new(input, args).lines} }
 
-      it { should raise_exception(CodeInclusion::SubsetException) }
+      it "raises CodeInclusion::SubsetException with correct message" do
+        expect { subject.call }.to raise_error(
+          CodeInclusion::SubsetException
+        )
+      end
     end
   end
 
-- 
2.49.1

