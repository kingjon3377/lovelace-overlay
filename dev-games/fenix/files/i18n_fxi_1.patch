Index: fxi/src/g_blit.c
===================================================================
--- fxi/src/g_blit.c	2007-08-28 14:38:47.000000000 +0200
+++ fxi/src/g_blit.c	2007-08-28 14:44:30.000000000 +0200
@@ -44,6 +44,13 @@
 
 #include "fmath.h"
 #include <math.h>
+
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
 
 /* Define some constants and structs used by the blitter */
 
@@ -1144,7 +1151,7 @@
     else if (dest->depth == 16 && gr->depth == 1)
         draw_span = draw_span_1to16;
     else
-        gr_error ("Profundidad de color no soportada\n(gr_rotated_blit)") ;
+        gr_error (_("Unsupported colour depth (gr_rotated_blit)\n")) ;
 
     /* Fix por problemas de visualizacion */
 
@@ -1509,7 +1516,7 @@
     else if (dest->depth == 16 && gr->depth == 1)
         draw_hspan = draw_hspan_1to16;
     else
-        gr_error ("Profundidad de color no soportada\n(gr_blit)") ;
+        gr_error (_("Unsupported colour depth (gr_blit)\n")) ;
 
     /* Calculate the graphic center */
 
Index: fxi/src/g_console.c
===================================================================
--- fxi/src/g_console.c	2007-08-28 14:38:47.000000000 +0200
+++ fxi/src/g_console.c	2007-08-28 14:44:30.000000000 +0200
@@ -35,6 +35,13 @@
 #include <string.h>
 #include <ctype.h>
 
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
+
 #include "fxi.h"
 #include "dcb.h"
 
@@ -50,7 +57,7 @@
 #define CONSOLE_COLUMNS 52
 #define COMMAND_HISTORY 64
 
-#define HELPTXT \
+#define HELPTXT _( \
             "¬02Process Info¬07\n"                                          \
             "¬04INSTANCES      ¬07  List all running processes\n"           \
             "¬04GLOBALS        ¬07  Show global vars with values\n"         \
@@ -85,7 +92,7 @@
             "\n"                                                            \
             "You can evaluate free expressions in the console,\n"           \
             "and you can see/change local, public and private vars\n"       \
-            "using the '.' operator (pe: 65535.X, MAIN.X, etc.)\n"
+            "using the '.' operator (pe: 65535.X, MAIN.X, etc.)\n")
 
 /* ---------------------------------------------------------------------- */
 
@@ -956,7 +963,7 @@
         }
     }
 
-    gr_con_printf ("Local or private or public variable not found") ;
+    gr_con_printf (_("Local or private or public variable not found")) ;
     result.type = T_ERROR ;
 }
 
@@ -982,7 +989,7 @@
 
     if (token.type != IDENTIFIER)
     {
-        gr_con_printf ("Not a valid expression") ;
+        gr_con_printf (_("Not a valid expression")) ;
         result.type = T_ERROR ;
         return ;
     }
@@ -993,7 +1000,7 @@
         eval_subexpression() ;
         if (token.name[0] != ')')
         {
-            gr_con_printf ("Unbalanced parens") ;
+            gr_con_printf (_("Unbalanced parens")) ;
             result.type = T_ERROR ;
             return ;
         }
@@ -1009,7 +1016,7 @@
         if (result.type != T_CONSTANT)
         {
             result.type = T_ERROR ;
-            gr_con_printf ("Operand is not a number\n") ;
+            gr_con_printf (_("Operand is not a number\n")) ;
             return ;
         }
         result.value = -result.value ;
@@ -1046,7 +1053,7 @@
             }
             if (!i)
             {
-                gr_con_printf ("No instance of process %s is active", token.name) ;
+                gr_con_printf (_("No instance of process %s is active"), token.name) ;
                 result.type = T_ERROR ;
                 return ;
             }
@@ -1055,7 +1062,7 @@
             if (token.name[0] != '.')
             {
                 result.type = T_ERROR ;
-                gr_con_printf ("Invalid use of a process name") ;
+                gr_con_printf (_("Invalid use of a process name")) ;
                 return ;
             }
             get_token() ;
@@ -1064,7 +1071,7 @@
         }
     }
 
-    gr_con_printf ("Variable does not exist (%s)", token.name) ;
+    gr_con_printf (_("Variable does not exist (%s)"), token.name) ;
     result.type = T_ERROR ;
     return ;
 }
@@ -1090,7 +1097,7 @@
                 if (!i)
                 {
                     result.type = T_ERROR ;
-                    gr_con_printf ("No existe instancia %d\n", (int)result.value) ;
+                    gr_con_printf (_("Instance %d does not exist\n"), (int)result.value) ;
                     return ;
                 }
                 get_token() ;
@@ -1101,14 +1108,14 @@
             if (result.type != T_VARIABLE
                 || result.var.Type.BaseType[0] != TYPE_STRUCT)
             {
-                gr_con_printf ("%s is not an struct", result.name);
+                gr_con_printf (_("%s is not an struct"), result.name);
                 result.type = T_ERROR ;
                 return ;
             }
             get_token() ;
             if (token.type != IDENTIFIER)
             {
-                gr_con_printf ("%s is not a member", token.name) ;
+                gr_con_printf (_("%s is not a member"), token.name) ;
                 result.type = T_ERROR ;
                 return ;
             }
@@ -1122,7 +1129,7 @@
             }
             if (n == v->NVars)
             {
-                gr_con_printf ("%s is not a member", token.name) ;
+                gr_con_printf (_("%s is not a member"), token.name) ;
                 result.type = T_ERROR ;
                 return ;
             }
@@ -1144,7 +1151,7 @@
 
             if (result.type != T_VARIABLE || result.var.Type.BaseType[0] != TYPE_ARRAY)
             {
-                gr_con_printf ("%s is not an array", result.name) ;
+                gr_con_printf (_("%s is not an array"), result.name) ;
                 result.type = T_ERROR ;
                 return ;
             }
@@ -1158,19 +1165,19 @@
 
             if (result.type != T_CONSTANT)
             {
-                gr_con_printf ("%s is not an integer", result.name) ;
+                gr_con_printf (_("%s is not an integer"), result.name) ;
                 result.type = T_ERROR ;
                 return ;
             }
             if (result.value < 0)
             {
-                gr_con_printf ("Index (%d) less than zero", result.value) ;
+                gr_con_printf (_("Index (%d) less than zero"), result.value) ;
                 result.type = T_ERROR ;
                 return ;
             }
             if (result.value >= i.Type.Count[0])
             {
-                gr_con_printf ("Index (%d) out of bounds", result.value) ;
+                gr_con_printf (_("Index (%d) out of bounds"), result.value) ;
                 result.type = T_ERROR ;
                 return ;
             }
@@ -1201,14 +1208,14 @@
         if (result.type != T_CONSTANT)
         {
             result.type = T_ERROR ;
-            gr_con_printf ("Operand is not a number\n") ;
+            gr_con_printf (_("Operand is not a number\n")) ;
             return ;
         }
         if (!op) op = 1 ;
         if (op > 1 && !result.value)
         {
             result.type = T_ERROR ;
-            gr_con_printf ("Divide by zero\n") ;
+            gr_con_printf (_("Divide by zero\n")) ;
             return ;
         }
         if (op == 1) base *= result.value ;
@@ -1240,7 +1247,7 @@
         if (result.type != T_CONSTANT)
         {
             result.type = T_ERROR ;
-            gr_con_printf ("Operand is not a number\n") ;
+            gr_con_printf (_("Operand is not a number\n")) ;
             return ;
         }
         if (!op) op = 1 ;
@@ -1272,7 +1279,7 @@
     {
         if (result.type != T_ERROR)
         {
-            gr_con_printf ("Invalid expression");
+            gr_con_printf (_("Invalid expression"));
             result.type = T_ERROR;
         }
         return 0;
@@ -1298,7 +1305,7 @@
         {
             if (lvalue.type != T_VARIABLE)
             {
-                strcpy (buffer, "Not an lvalue") ;
+                strcpy (buffer, _("Not an lvalue")) ;
                 if (interactive) gr_con_printf ("%s", buffer) ;
                 return buffer ;
             }
@@ -1329,7 +1336,7 @@
             }
             else
             {
-                strcpy (buffer, "Invalid assignation") ;
+                strcpy (buffer, _("Invalid assignation")) ;
                 if (interactive) gr_con_printf ("%s", buffer) ;
                 return buffer ;
             }
@@ -1387,7 +1394,7 @@
                 if (LOCDWORD(i, PROCESS_ID) == procno)
                     break;
             if (!i) {
-                gr_con_printf ("Instance %d does not exist", procno);
+                gr_con_printf (_("Instance %d does not exist"), procno);
                 return NULL;
             }
         }
@@ -1406,14 +1413,14 @@
                 if (dcb.proc[procno].data.ID == dcb.id[n].Code)
                     break;
             if (procno == (int)dcb.data.NProcs) {
-                gr_con_printf ("Unknown process %s", action);
+                gr_con_printf (_("Unknown process %s"), action);
                 return NULL;
             }
             for (i = last ? last->next : first_instance ; i ; i = i->next)
                 if (i->proc->type == procno)
                     break;
             if (!i && !last) {
-                gr_con_printf ("No instance of process %s created\n", action);
+                gr_con_printf (_("No instance of process %s created\n"), action);
                 return NULL;
             }
         }
@@ -1488,10 +1495,10 @@
                     if (LOCDWORD(i, PROCESS_ID) == procno)
                         break;
                 if (!i) {
-                    gr_con_printf ("Instance %d does not exist", procno);
+                    gr_con_printf (_("Instance %d does not exist"), procno);
                 } else {
                     i->breakpoint = 1;
-                    gr_con_printf ("Ok");
+                    gr_con_printf (_("Ok"));
                 }
             }
             else
@@ -1505,10 +1512,10 @@
                 if (*action) {
                     p = procdef_get_by_name(action);
                     if (!p) {
-                        gr_con_printf ("Process type %d does not exist", procno);
+                        gr_con_printf (_("Process type %d does not exist"), procno);
                     } else {
                         p->breakpoint = 1;
-                        gr_con_printf ("Ok");
+                        gr_con_printf (_("Ok"));
                     }
                 }
             }
@@ -1517,7 +1524,7 @@
             for (n = 0 ; n < procdef_count; n++) {
                 if (procs[n].breakpoint) {
                     if (!f) {
-                        gr_con_printf("¬02Process type breakpoints¬07\n");
+                        gr_con_printf(_("¬02Process type breakpoints¬07\n"));
                         f = 1;
                     }
                     gr_con_printf("%s\n", procs[n].name);
@@ -1530,7 +1537,7 @@
             for (i = first_instance ; i ; i = i->next) {
                 if (i->breakpoint) {
                     if (!f) {
-                            gr_con_printf("¬02Process breakpoints¬07\n");
+                            gr_con_printf(_("¬02Process breakpoints¬07\n"));
                         f = 1;
                     }
                     gr_con_printf("%d\n", LOCDWORD(i, PROCESS_ID));
@@ -1552,10 +1559,10 @@
                     if (LOCDWORD(i, PROCESS_ID) == procno)
                         break;
                 if (!i) {
-                    gr_con_printf ("Instance %d does not exist", procno);
+                    gr_con_printf (_("Instance %d does not exist"), procno);
                 } else {
                     i->breakpoint = 0;
-                    gr_con_printf ("Ok");
+                    gr_con_printf (_("Ok"));
                 }
             }
             else
@@ -1568,10 +1575,10 @@
 
                 p = procdef_get_by_name(action);
                 if (!p) {
-                    gr_con_printf ("Process type %d does not exist", procno);
+                    gr_con_printf (_("Process type %d does not exist"), procno);
                 } else {
                     p->breakpoint = 0;
-                    gr_con_printf ("Ok");
+                    gr_con_printf (_("Ok"));
                 }
             }
         }
@@ -1617,7 +1624,7 @@
             }
         } else if (show_public) {
             if (!i) {
-                gr_con_printf ("Use: PUBLICS process");
+                gr_con_printf (_("Usage: PUBLICS process"));
                 return;
             }
             for (var = 0 ; var < dcb.proc[i->proc->type].data.NPubVars ; var++)
@@ -1632,7 +1639,7 @@
             }
         } else {
             if (!i) {
-                gr_con_printf ("Use: PRIVATES process");
+                gr_con_printf (_("Usage: PRIVATES process"));
                 return;
             }
             for (var = 0 ; var < dcb.proc[i->proc->type].data.NPriVars ; var++)
@@ -1724,7 +1731,7 @@
                         			default:
                                             freestrings(p, inst->pridata);
                                             instance_destroy(inst);
-                                            gr_con_printf("Invalid argument %d\n", i);
+                                            gr_con_printf(_("Invalid argument %d\n"), i);
                                             return;
                                 }
                                 break;
@@ -1738,13 +1745,13 @@
                             default:
                                 freestrings(p, inst->pridata);
                                 instance_destroy(inst);
-                                gr_con_printf("Invalid argument %d\n", i);
+                                gr_con_printf(_("Invalid argument %d\n"), i);
                                 return;
                         }
                     }
-                    gr_con_printf("Process %s is executed!\n", p->name );
+                    gr_con_printf(_("Process %s is executed!\n"), p->name );
                 } else {
-                    gr_con_printf("Process %s not found!\n", p->name );
+                    gr_con_printf(_("Process %s not found!\n"), p->name );
                 }
                 return;
             }
Index: fxi/src/g_conversion.c
===================================================================
--- fxi/src/g_conversion.c	2007-08-28 14:38:47.000000000 +0200
+++ fxi/src/g_conversion.c	2007-08-28 14:44:30.000000000 +0200
@@ -34,6 +34,13 @@
 
 #include <stdlib.h>
 
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
+
 #include "fxi.h"
 
 /* Conversion tables - used by 16 bits conversions - 256K */
@@ -223,7 +230,7 @@
 	convertScreenTo565 = (Uint16 *) malloc(sizeof(Uint16) * 65536);
 	if (convert565ToScreen == NULL && convertScreenTo565 == NULL)
 	{
-		gr_error ("init_conversion_tables: sin memoria");
+		gr_error (_("init_conversion_tables: out of memory"));
 		return;
 	}
 
Index: fxi/src/g_draw.c
===================================================================
--- fxi/src/g_draw.c	2007-08-28 14:38:47.000000000 +0200
+++ fxi/src/g_draw.c	2007-08-28 14:44:31.000000000 +0200
@@ -34,6 +34,13 @@
 #include <math.h>
 #include <stdlib.h>
 
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
+
 #include "fxi.h"
 
 #include "files.h"
@@ -178,7 +185,7 @@
         case 1:
             return (((Uint8 *)dest->data)[x/8 + dest->pitch*y] & (0x80 >> (x & 7))) ? 1:0;
         default:
-            gr_error ("gr_get_pixel: Profundidad de color no soportada");
+            gr_error (_("gr_get_pixel: Unsupported colour depth"));
             return 0;
     }
 }
@@ -221,7 +228,7 @@
                 ((Uint8 *)dest->data)[x/8 + dest->pitch*y] &= ~(0x80 >> (x & 7)) ;
             break;
         default:
-            gr_error ("gr_put_pixel: Profundidad de color no soportada");
+            gr_error (_("gr_put_pixel: Unsupported colour depth"));
     }
 }
 
@@ -309,7 +316,7 @@
                 memset ((Uint8 *)dest->data + dest->pitch * y, color ? 0xFF:0, dest->width/8) ;
             break;
         default:
-            gr_error ("gr_clear_as: Profundidad de color no soportada");
+            gr_error (_("gr_clear_as: Unsupported colour depth"));
     }
 
     if (dest == background && !color)
Index: fxi/src/g_font.c
===================================================================
--- fxi/src/g_font.c	2007-08-28 14:38:48.000000000 +0200
+++ fxi/src/g_font.c	2007-08-28 14:44:31.000000000 +0200
@@ -40,6 +40,13 @@
 #include <stdlib.h>
 #include <string.h>
 
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
+
 #include "fxi.h"
 
 FONT * fonts[256] = { 0 } ;
@@ -66,12 +73,12 @@
 
 	if (f == NULL)
 	{
-		gr_error ("gr_font_new: sin memoria");
+		gr_error (_("gr_font_new: out of memory"));
 		return -1;
 	}
 	if (font_count == 255)
 	{
-		gr_error ("gr_font_new: demasiadas fuentes");
+		gr_error (_("gr_font_new: too many fonts"));
 		return -1;
 	}
 
@@ -134,7 +141,7 @@
 		bitmap = bitmap_new (i, width, height, 1, 1);
 		if (bitmap == NULL)
 		{
-			gr_error ("gr_font_newfrombitmap: sin memoria");
+			gr_error (_("gr_font_newfrombitmap: out of memory"));
 			return id;
 		}
 
@@ -361,7 +368,7 @@
 	if (memcmp (header, "fnt\x1a\x0d\x0a", 7) != 0 &&
 		memcmp (header, "fnx\x1a\x0d\x0a", 7) != 0)
 	{
-		gr_error ("gr_font_load: formato desconocido");
+		gr_error (_("gr_font_load: unknown format"));
 		return -1;
 	}
 
@@ -517,7 +524,7 @@
 
 	if (fontid < 0 || fontid > 255 || !fonts[fontid])
 	{
-		gr_error ("gr_font_save: fuente incorrecta");
+		gr_error (_("gr_font_save: invalid font"));
 		return 0;
 	}
 	font = fonts[fontid];
@@ -537,7 +544,7 @@
 	file = gzopen (fullname, "wb");
 	if (!file)
 	{
-		gr_error ("gr_font_save: no se pudo crear el fichero %s", fullname);
+		gr_error (_("gr_font_save: file '%s' could not be created"), fullname);
 		return 0;
 	}
 
@@ -614,7 +621,7 @@
 
 			if (gr->depth != font->bpp)
 			{
-				gr_error ("gr_font_save: fuente corrupta");
+				gr_error (_("gr_font_save: corrupt font"));
 				gzclose (file);
 				return 0;
 			}
@@ -623,7 +630,7 @@
 			{
 				if ( (block = malloc(gr->widthb)) == NULL)
 				{
-					gr_error ("gr_font_save: sin memoria");
+					gr_error (_("gr_font_save: out of memory"));
 					gzclose (file);
 					return 0;
 				}
@@ -831,7 +838,7 @@
 
 	if (error)
 	{
-		gr_error ("gr_load_bdf: incorrect BDF file");
+		gr_error (_("gr_load_bdf: incorrect BDF file"));
 		return -1;
 	}
 
