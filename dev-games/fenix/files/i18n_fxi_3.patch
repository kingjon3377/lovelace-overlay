Index: fxi/src/i_main.c
===================================================================
--- a/fxi/src/i_main.c	2007-08-28 14:38:49.000000000 +0200
+++ b/fxi/src/i_main.c	2007-08-28 14:44:31.000000000 +0200
@@ -39,6 +39,13 @@
 
 #include <string.h>
 
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
+
 #include "fxi.h"
 #include "dcb.h"
 
@@ -538,7 +545,7 @@
                     int * old_data      = private_data;
                     private_data = stack_ptr - proc->params;
                     if (stack_ptr > stack + sizeof(stack)/4 - proc->private_size/4 - 128) // 128 = reservado
-                        gr_error ("Stack overflow!");
+                        gr_error (_("Stack overflow!"));
 
                     stack_ptr += ( proc->private_size/4 - proc->params ) ;
 
@@ -558,7 +565,7 @@
 
             case MN_SYSCALL:
                 p = sysproc_get (ptr[1]) ;
-                if (!p) gr_error ("Error: Función del sistema desconocida\n") ;
+                if (!p) gr_error (_("Error: unknown system function\n")) ;
                 stack_ptr -= p->params ;
                 *stack_ptr = (*p->func) (r, stack_ptr) ;
                 stack_ptr++ ;
@@ -567,7 +574,7 @@
 
             case MN_SYSPROC:
                 p = sysproc_get (ptr[1]) ;
-                if (!p) gr_error ("Error: Procedimiento del sistema desconocido\n") ;
+                if (!p) gr_error (_("Error: unknown system procedure\n")) ;
                 stack_ptr -= p->params ;
                 (*p->func) (r, stack_ptr) ;
                 ptr += 2 ;
@@ -633,7 +640,7 @@
             case MN_REMOTE | MN_FLOAT:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = (int) &LOCDWORD(i, ptr[1]) ;
                 ptr += 2 ;
@@ -649,7 +656,7 @@
             case MN_REMOTE_PUBLIC | MN_FLOAT:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = (int) &PUBDWORD(i, ptr[1]) ;
                 ptr += 2 ;
@@ -690,7 +697,7 @@
             case MN_GET_REMOTE | MN_UNSIGNED:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = LOCDWORD(i,ptr[1]) ;
                 ptr += 2 ;
@@ -701,7 +708,7 @@
             case MN_GET_REMOTE_PUBLIC | MN_UNSIGNED:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = PUBDWORD(i,ptr[1]) ;
                 ptr += 2 ;
@@ -749,7 +756,7 @@
             case MN_GET_REMOTE | MN_STRING:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = LOCDWORD(i,ptr[1]) ;
                 string_use     ( stack_ptr[-1] ) ;
@@ -759,7 +766,7 @@
             case MN_GET_REMOTE_PUBLIC | MN_STRING:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = PUBDWORD(i,ptr[1]) ;
                 string_use     ( stack_ptr[-1] ) ;
@@ -824,7 +831,7 @@
             case MN_WORD | MN_GET_REMOTE | MN_UNSIGNED:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = LOCWORD(i,ptr[1]) ;
                 ptr += 2 ;
@@ -834,7 +841,7 @@
             case MN_WORD | MN_GET_REMOTE_PUBLIC | MN_UNSIGNED:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = PUBWORD(i,ptr[1]) ;
                 ptr += 2 ;
@@ -897,7 +904,7 @@
             case MN_BYTE | MN_GET_REMOTE:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = (signed char) LOCBYTE(i,ptr[1]) ;
                 ptr += 2 ;
@@ -906,7 +913,7 @@
             case MN_BYTE | MN_GET_REMOTE | MN_UNSIGNED:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = LOCBYTE(i,ptr[1]) ;
                 ptr += 2 ;
@@ -915,7 +922,7 @@
             case MN_BYTE | MN_GET_REMOTE_PUBLIC:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = (signed char) PUBBYTE(i,ptr[1]) ;
                 ptr += 2 ;
@@ -924,7 +931,7 @@
             case MN_BYTE | MN_GET_REMOTE_PUBLIC | MN_UNSIGNED:
                 i = instance_get (stack_ptr[-1]) ;
                 if (i == 0)
-                    gr_error ("Error de ejecucion en proceso %s(%d):\nProcedimiento %d no activo\n", proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
+                    gr_error (_("Error executing process %s (%d): Inactive procedure %d\n"), proc->name, LOCDWORD(r,PROCESS_ID), stack_ptr[-1]) ;
                 else
                     stack_ptr[-1] = PUBBYTE(i,ptr[1]) ;
                 ptr += 2 ;
@@ -978,7 +985,7 @@
 
             case MN_FLOAT | MN_DIV:
                 if (*((float *)&stack_ptr[-1]) == 0.0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 *(float *)&stack_ptr[-2] /= *((float *)&stack_ptr[-1]) ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1052,7 +1059,7 @@
             case MN_DIV | MN_BYTE:
             case MN_DIV:
                 if (stack_ptr[-1] == 0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 stack_ptr[-2] /= stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1062,7 +1069,7 @@
             case MN_DIV | MN_BYTE | MN_UNSIGNED:
             case MN_DIV | MN_UNSIGNED:
                 if (stack_ptr[-1] == 0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 stack_ptr[-2] = (Uint32)stack_ptr[-2] / (Uint32)stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1072,7 +1079,7 @@
             case MN_MOD | MN_BYTE:
             case MN_MOD:
                 if (stack_ptr[-1] == 0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 stack_ptr[-2] %= stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1082,7 +1089,7 @@
             case MN_MOD | MN_BYTE | MN_UNSIGNED:
             case MN_MOD | MN_UNSIGNED:
                 if (stack_ptr[-1] == 0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 stack_ptr[-2] = (Uint32)stack_ptr[-2] % (Uint32)stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1602,7 +1609,7 @@
             case MN_VARDIV:
             case MN_VARDIV | MN_UNSIGNED:
                 if (stack_ptr[-1] == 0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 *(Sint32 *)(stack_ptr[-2]) /= stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1611,7 +1618,7 @@
             case MN_VARMOD:
             case MN_VARMOD | MN_UNSIGNED:
                 if (stack_ptr[-1] == 0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 *(Sint32 *)(stack_ptr[-2]) %= stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1728,7 +1735,7 @@
             case MN_WORD | MN_VARDIV:
             case MN_WORD | MN_VARDIV | MN_UNSIGNED:
                 if ((Sint16)stack_ptr[-1] == 0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 *(Sint16 *)(stack_ptr[-2]) /= (Sint16)stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1737,7 +1744,7 @@
             case MN_WORD | MN_VARMOD:
             case MN_WORD | MN_VARMOD | MN_UNSIGNED:
                 if ((Sint16)stack_ptr[-1] == 0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 *(Sint16 *)(stack_ptr[-2]) %= (Sint16)stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1854,7 +1861,7 @@
             case MN_BYTE | MN_VARDIV:
             case MN_BYTE | MN_VARDIV | MN_UNSIGNED:
                 if ((Uint8)stack_ptr[-1] == 0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 *(Uint8 *)(stack_ptr[-2]) /= (Uint8)stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1863,7 +1870,7 @@
             case MN_BYTE | MN_VARMOD:
             case MN_BYTE | MN_VARMOD | MN_UNSIGNED:
                 if ((Uint8)stack_ptr[-1] == 0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 *(Uint8 *)(stack_ptr[-2]) %= (Uint8)stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -1969,7 +1976,7 @@
 
             case MN_FLOAT | MN_VARDIV:
                 if (*(float *)&stack_ptr[-1] == 0.0)
-                    gr_error ("Error: Division por cero\n") ;
+                    gr_error (_("Error: division by zero\n")) ;
                 *(float *)(stack_ptr[-2]) /= *(float *)&stack_ptr[-1] ;
                 stack_ptr-- ;
                 ptr++ ;
@@ -2079,7 +2086,7 @@
                 {
                 PROCDEF * proct = procdef_get (ptr[1]) ;
                 if (!proct)
-                    gr_error ("Error: Procedimiento desconocido\n") ;
+                    gr_error (_("Error: unknown procedure\n")) ;
                 *stack_ptr++ = proct->type ;
                 ptr += 2 ;
                 break ;
@@ -2183,7 +2190,7 @@
                 break ;
 
             default:
-                gr_error ("Error: Mnemonico 0x%02X no implementado en %s\n", *ptr, proc->name) ;
+                gr_error (_("Error: unimplemented mnemonic 0x%02X in %s\n"), *ptr, proc->name) ;
 
         }
 
Index: fxi/src/img_pcx.c
===================================================================
--- a/fxi/src/img_pcx.c	2007-08-28 14:38:49.000000000 +0200
+++ b/fxi/src/img_pcx.c	2007-08-28 14:44:31.000000000 +0200
@@ -45,6 +45,13 @@
 #include <string.h>
 #include <stdlib.h>
 
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
+
 #include "fxi.h"
 
 /*
@@ -97,7 +104,7 @@
 	Uint8 *   ptr, ch ;
 
 	file = file_open (filename, "rb") ;
-	if (!file) gr_error ("%s: Could not open the file\n", filename) ;
+	if (!file) gr_error (_("%s: Could not open the file\n"), filename) ;
 
 	file_read (file, &header, sizeof(header)) ;
 
@@ -116,7 +123,7 @@
 	width  = header.Xmax - header.Xmin + 1 ;
 	height = header.Ymax - header.Ymin + 1 ;
 	bitmap = bitmap_new (0, width, height, header.BitsPerPixel == 8 ? 8:16, 1) ;
-	if (!bitmap) gr_error ("%s: Could not allocate required memory\n", filename) ;
+	if (!bitmap) gr_error (_("%s: Could not allocate required memory\n"), filename) ;
 
 	assert (width <= header.BytesPerLine) ;
 
@@ -126,7 +133,7 @@
 			ptr = (Uint8 *)bitmap->data + bitmap->pitch * y ;
 			for (x = 0 ; x < header.BytesPerLine ; ) {
 				if (file_read (file, &ch, 1) < 1)
-					gr_error ("%s: Truncated file", filename) ;
+					gr_error (_("%s: Truncated file"), filename) ;
 				if ((ch & 0xC0) == 0xC0) {
 					count = (ch & 0x3F) ;
 					file_read (file, &ch, 1) ;
@@ -141,7 +148,7 @@
 			}
 		}
 	} else {
-		gr_error ("%s: Non supported color depth\n", filename) ;
+		gr_error (_("%s: unsupported color depth\n"), filename) ;
 	}
 
 	bitmap->modified = 1 ;
Index: fxi/src/img_png.c
===================================================================
--- a/fxi/src/img_png.c	2007-08-28 14:38:49.000000000 +0200
+++ b/fxi/src/img_png.c	2007-08-28 14:44:32.000000000 +0200
@@ -45,6 +45,13 @@
 #include <string.h>
 #include <stdlib.h>
 
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
+
 #include <png.h>
 #include "fxi.h"
 
@@ -82,15 +89,15 @@
     /* Abre el fichero y se asegura de que screen está inicializada */
 
     png = file_open (filename, "rb") ;
-    if (!png) gr_error ("No existe %s\n", filename) ;
+    if (!png) gr_error (_("'%s': file does not exist\n"), filename) ;
 
     /* Prepara las estructuras internas */
 
     png_ptr = png_create_read_struct (PNG_LIBPNG_VER_STRING, 0, 0, 0) ;
-    if (!png_ptr) gr_error ("Error al cargar PNG") ;
+    if (!png_ptr) gr_error (_("Error loading PNG file")) ;
     info_ptr = png_create_info_struct (png_ptr) ;
     end_info = png_create_info_struct (png_ptr) ;
-    if (!info_ptr || !end_info) gr_error ("Error al cargar PNG") ;
+    if (!info_ptr || !end_info) gr_error (_("Error loading PNG file")) ;
 
     /* Rutina de error */
 
@@ -138,7 +145,7 @@
 
     rowbytes = png_get_rowbytes (png_ptr, info_ptr) ;
     bitmap = bitmap_new (0, width, height, color == PNG_COLOR_TYPE_PALETTE ? 8 : 16, 1) ;
-    if (!bitmap) gr_error ("Error al cargar PNG") ;
+    if (!bitmap) gr_error (_("Error loading PNG file")) ;
     if (color == PNG_COLOR_TYPE_PALETTE)
     {
         /* Read the color palette */
@@ -147,7 +154,7 @@
         {
             png_colorp png_palette = (png_colorp) png_malloc (png_ptr, 256*sizeof(png_color)) ;
             if (!png_palette)
-                gr_error ("Sin memoria") ;
+                gr_error (_("Out of memory")) ;
             else
             {
                 png_get_PLTE (png_ptr, info_ptr, &png_palette, &n) ;
Index: fxi/src/i_saveload.c
===================================================================
--- a/fxi/src/i_saveload.c	2007-08-28 14:38:49.000000000 +0200
+++ b/fxi/src/i_saveload.c	2007-08-28 14:39:59.000000000 +0200
@@ -43,6 +43,13 @@
 #include <math.h>
 #include <time.h>
 
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
+
 #include "fxi.h"
 
 static int savetype (file * fp, void * data, DCB_TYPEDEF * var);
@@ -251,7 +258,7 @@
 				}
 				break;
 			default:
-				gr_error ("No es posible grabar esta estructura");
+				gr_error (_("Cannot save this structure"));
 				break;
 		}
 		break;
@@ -324,7 +331,7 @@
 				str = malloc(len+1);
 				if (str == 0)
 				{
-					gr_error ("loadtype: Sin memoria");
+					gr_error (_("loadtype: out of memory"));
 				}
 				else
 				{
@@ -352,7 +359,7 @@
 				}
 				break;
 			default:
-				gr_error ("No es posible recuperar esta estructura");
+				gr_error (_("Cannot recover this structure"));
 				break;
 		}
 		break;
Index: fxi/src/main.c
===================================================================
--- a/fxi/src/main.c	2007-08-28 14:38:49.000000000 +0200
+++ b/fxi/src/main.c	2007-08-28 14:46:17.000000000 +0200
@@ -47,6 +47,14 @@
 #include <string.h>
 #include <time.h>
 
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#include <locale.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
+
 #include "fxi.h"
 #include "font.h"
 #include "dcb.h"
@@ -153,6 +161,14 @@
 	}
 	dcb_signature;
 
+#ifdef USE_GETTEXT
+	setlocale (LC_MESSAGES, "");
+	setlocale (LC_CTYPE, "");
+	setlocale (LC_COLLATE, "");
+	textdomain ("fenix-fxi");
+	bindtextdomain ("fenix-fxi", NULL);
+#endif
+
 	/* Find out if we are calling fxi.exe or whatever.exe */
 
  	ptr = argv[0] + strlen(argv[0]) ;
@@ -168,7 +184,7 @@
 
 	if ( SDL_Init (SDL_INIT_VIDEO | SDL_INIT_JOYSTICK | SDL_INIT_CDROM) < 0 )
 	{
-		printf ("SDL Init Error: %s\n", SDL_GetError()) ;
+		printf (_("SDL Init Error: %s\n"), SDL_GetError()) ;
 		do_exit(1) ;
 	}
 
@@ -246,7 +262,7 @@
 						if (argv[i][j+1] == 0)
 						{
 							if (i == argc-1)
-								gr_error ("You must provide a directory") ;
+								gr_error (_("You must provide a directory")) ;
 							file_addp (argv[i+1]);
 							i++ ;
 							break ;
@@ -273,7 +289,8 @@
 
 		if (!filename)
 		{
-			gr_error ( FXI_VERSION "\nCopyright(C) 2002 Fenix Team\nCopyright (C)1999 Jose Luis Cebrian\n"
+			gr_error ( _("Fenix 0.92 FXI\nCopyright (C) 2002 Fenix Team\n"
+				"Copyright (C) 1999 Jose Luis Cebrian Pague\n"
 				"Fenix comes with ABSOLUTELY NO WARRANTY; see COPYING for details\n\n"
 				"Usage: %s [options] file.dcb\n\n"
 				"   -d       Activate DEBUG mode\n"
@@ -282,7 +299,7 @@
 				"GNU General Public License published by Free Software Foundation.\n"
 				"Permission granted to distribute and/or modify as stated in the license\n"
 				"agreement (GNU GPL version 2 or later).\n"
-				"See COPYING for license details.\n",
+				"See COPYING for license details.\n"),
 				argv[0]) ;
 			return 0 ;
 		}
@@ -321,7 +338,7 @@
 
 				if (!dcb_load(dcbname))
 				{
-					gr_error ("%s: no existe o no es un DCB version %d o compatible", filename, DCB_VERSION >> 8) ;
+					gr_error (_("'%s': file does not exist or it's not a DCB version %d file or compatible"), filename, DCB_VERSION >> 8) ;
 					return -1 ;
 				}
 			}
Index: fxi/src/sound.c
===================================================================
--- a/fxi/src/sound.c	2007-08-28 14:38:49.000000000 +0200
+++ b/fxi/src/sound.c	2007-08-28 14:40:00.000000000 +0200
@@ -40,6 +40,13 @@
 #include <stdlib.h>
 #include <string.h>
 
+#ifdef USE_GETTEXT
+#include <libintl.h>
+#define _(String) gettext (String)
+#else
+#define _(String) String
+#endif
+
 #include "fxi.h"
 
 
@@ -128,7 +135,7 @@
 		audio_initialized = 1;
 		if (SDL_InitSubSystem(SDL_INIT_AUDIO) < 0)
 		{
-			gr_con_printf ("[SOUND] Sonido no disponible: %s", SDL_GetError()) ;
+			gr_con_printf (_("[SOUND] Sound not available: %s"), SDL_GetError()) ;
 			return;
 		}
 
@@ -149,7 +156,7 @@
 
     	/* Open the audio device */
     	if (Mix_OpenAudio(audio_rate, audio_format, audio_channels, audio_buffers) < 0) {
-    		gr_con_printf ("[SOUND] No se pudo inicializar el audio: %s\n",SDL_GetError()) ;
+    		gr_con_printf (_("[SOUND] Audio could not be initialized: %s\n"),SDL_GetError()) ;
     		sound_active=0;
     		return;
     	} else {
@@ -157,11 +164,11 @@
     		Mix_QuerySpec(&audio_rate, &audio_format, &audio_channels);
     		audio_mix_channels = Mix_AllocateChannels(-1) ;
     		GLODWORD(SOUND_CHANNELS) = audio_mix_channels ;
-    		gr_con_printf ("Opened audio at %d Hz %d bit %s, %d bytes audio buffer\n", audio_rate,
+    		gr_con_printf (_("Opened audio at %d Hz %d bit %s, %d bytes audio buffer\n"), audio_rate,
     			(audio_format&0xFF),
     			(audio_channels > 1) ? "stereo" : "mono",
     			audio_buffers );
-    		gr_con_printf ("Allocated %i audio mixing channels\n", audio_mix_channels) ;
+    		gr_con_printf (_("Allocated %i audio mixing channels\n"), audio_mix_channels) ;
     		// Set mixing channels
 
     		sound_active=1;
@@ -239,7 +246,7 @@
 
 	if ( music == NULL ) {
 	    file_close(fp);
-		gr_con_printf("Couldn't load %s: %s\n",filename, SDL_GetError());
+		gr_con_printf(_("Could not load '%s': %s\n"),filename, SDL_GetError());
 		return(-1);
 	} else {
 		return ((int)music);
@@ -271,7 +278,7 @@
 		sound_init();
 	if (sound_active==0)
 	{
-		gr_error ("Sound is not active");
+		gr_error (_("Sound is not active"));
 		return (-1);
 	}
 
@@ -282,7 +289,7 @@
 		}
 		return result;
 	} else {
-		gr_error ("Play song called with invalid handle");
+		gr_error (_("Play song called with invalid handle"));
 		return(-1);
 	}
 
@@ -575,7 +582,7 @@
 	music = Mix_LoadWAV_RW(SDL_RWFromFenixFP(fp),1);
 
 	if ( music == NULL ) {
- 		gr_con_printf("Couldn't load %s: %s\n",filename, SDL_GetError());
+ 		gr_con_printf(_("Couldn't load %s: %s\n"),filename, SDL_GetError());
 		return(0);
 	} else {
 		return ((int)music);
