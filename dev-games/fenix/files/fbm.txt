EspecificaciÃ³n del formato FBM (Fenix BitMap)

Esta secciÃ³n describe el contenido de un fichero FBM. No es necesario conocer
estos detalles simplemente para programar juegos, pero serÃ¡n de utilidad a
quien quiera realizar utilidades en lenguajes externos que lean o escriban
ficheros FBM.

Un fichero FBM no incluye compresiÃ³n. Fenix soporta de forma transparente el
uso de compresiÃ³n GZIP en los ficheros, sin necesidad de marcarlos
especialmente con extensiÃ³n .gz. Normalmente un fichero FBM se guarda en disco
comprimido de esta manera, pero en el resto del fichero asumiremos que el
fichero FBM no estÃ¡ comprimido.

En la descripciÃ³n siguiente, DWORD identifica un nÃºmero entero de 4 bytes sin
signo mientras INT indica entero de 4 bytes con signo. Estos valores se guardan
siguiendo la codificaciÃ³n Intel de bytes en memoria, asÃ­ que hay que darles
la vuelta al leer o escribir el fichero en otras plataformas.

Cabecera

Un fichero FBM comienza con la siguiente cabecera:
 ____________________________________________________________________________
|Nombre_____|TamaÃ±o__|DescripciÃ³n____________________________________________|
|           |        |Cadena de caracteres de identificaciÃ³n del fichero.    |
|           |        |Debe contener exactamente "FenixBitmap" seguido de un  |
|           |        |espacio y, a continuaciÃ³n, los cuatro bytes 1Ah, 0Dh,  |
|MAGIC      |16 bytes|0Ah y 00h. Esta terminaciÃ³n indica, en un fichero MS-  |
|           |        |DOS, final de fichero. Gracias a ella un comando TYPE  |
|           |        |en MS-DOS no mostrarÃ­a los datos binarios del fichero. |
|           |        |En este formato se conserva por razones puramente      |
|___________|________|nostÃ¡lgicas.___________________________________________|
|           |        |CÃ³digo de versiÃ³n. Se compone de un nÃºmero mayor de    |
|           |        |16 bits y un nÃºmero menor de 16 bits. Actualmente es   |
|           |        |0x0100. Si el formato se modificase en el futuro pero  |
|VERSION    |DWORD   |de manera que los ficheros fuesen compatibles con el   |
|           |        |formato actual, se incrementarÃ­a el nÃºmero menor. Las  |
|           |        |rutinas de carga deben rechazar un fichero FBM sÃ³lo si |
|___________|________|el_nÃºmero_mayor_no_es_01.______________________________|
|           |        |Bits por pixel de la imagen. Actualmente sÃ³lo son      |
|           |        |vÃ¡lidos 1, 8 Ã³ 16. Este valor modifica en cierta       |
|           |        |manera las secciones que aparecen a continuaciÃ³n (por  |
|PROFUNDIDAD|DWORD   |ejemplo, un FBM de 8 bits siempre cuenta con una paleta|
|           |        |de colores). Nota: TodavÃ­a no existe soporte completo  |
|           |        |para grÃ¡ficos de 1BPP desde fenix y por tanto no se    |
|___________|________|deberÃ­a_usar_este_modo_por_ahora_______________________|

Descriptor

Inmediatamente despuÃ©s de la cabecera aparece un bloque descriptor de 100
bytes de contenido fijo. Se puede interpretar como una extensiÃ³n de la
cabecera:
 ____________________________________________________________________________
|Nombre______|TamaÃ±o__|DescripciÃ³n___________________________________________|
|            |        |Cadena ASCIIZ con el nombre del grÃ¡fico (opcional). El|
|NOMBRE      |64 bytes|nombre puede ocupar exactamente 64 caracteres, con lo |
|____________|________|que_sÃ³lo_en_ese_caso_no_se_guardarÃ¡_el_0_terminal.____|
|            |        |Ancho en pixels del grÃ¡fico. A partir de este ancho se|
|            |        |puede calcular la cantidad de memoria en bytes que    |
|            |        |ocupa una fila del grÃ¡fico en disco, y que depende de |
|            |        |la PROFUNDIDAD de la cabecera:                        |
|            |        |    * Profundidad 1: (ancho+7) / 8, redondeado hacia  |
|ANCHO       |DWORD   |      abajo. Las filas, al guardarse en disco, se     |
|            |        |      incrementan con bits a cero hasta ocupar un     |
|            |        |      nÃºmero exacto de bytes, pero sÃ³lo si el ancho   |
|            |        |      original no es ya mÃºltiplo de 8.                |
|            |        |    * Profundidad 8: ancho                            |
|____________|________|____*_Profundidad_16:_ancho_*_2_______________________|
|ALTO________|DWORD___|Alto_en_pixels_del_pixels_del_grÃ¡fico_________________|
|            |        |Esta posiciÃ³n se reserva para flags informativos sobre|
|            |        |el contenido del grÃ¡fico. Por ahora sÃ³lo se reconoce  |
|            |        |el bit 0 de los flags:                                |
|            |        |    * Bit 0: sirve para marcar grÃ¡ficos sin pixels    |
|            |        |      transparentes. Si en todo el contenido del      |
|FLAGS       |DWORD   |      grÃ¡fico no hay ningÃºn pixel completamente a     |
|            |        |      cero, este bit debe grabarse activado. Esto es  |
|            |        |      independiente del uso que le quiera dar el      |
|            |        |      programador (un grÃ¡fico con varios pixels a cero|
|            |        |      que se muestre usando el flag NO_COLOR_KEY para |
|            |        |      hacerlos visibles, seguirÃ­a teniendo a cero este|
|____________|________|______bit).___________________________________________|
|            |        |Identificador del grÃ¡fico, de 0 a 999. Cuando el      |
|            |        |grÃ¡fico forma parte de una librerÃ­a FGC, indica su    |
|            |        |nÃºmero de Ã­ndice. El hecho de que se guarde en el     |
|ID          |DWORD   |fichero FBM permite extraer un grÃ¡fico del fichero    |
|            |        |FGC, grabarlo como FBM, y que ocupe la misma posiciÃ³n |
|            |        |si se importa de nuevo o se copia en otro FGC         |
|____________|________|diferente.____________________________________________|
|            |        |NÃºmero mÃ¡ximo de frame admitido en este grÃ¡fico. Si   |
|            |        |el grÃ¡fico no contiene animaciÃ³n, este valor es 0. En |
|            |        |caso contrario, contiene el nÃºmero de "versiones"     |
|MAX FRAME   |DWORD   |diferentes del grÃ¡fico que se guardan en el fichero,  |
|            |        |menos uno (0 para una sola versiÃ³n, 1 para dos, etc). |
|            |        |Un "frame" se refiere simplemente a "grÃ¡fico distinto,|
|____________|________|del_mismo_tamaÃ±o".____________________________________|
|            |        |NÃºmero mÃ¡ximo de secuencia de animaciÃ³n contenido en  |
|MAX SEQUENCE|DWORD   |este fichero. Este nÃºmero equivale al nÃºmero de       |
|____________|________|animaciones_que_contiene_el_FBM,_menos_uno.___________|
|            |        |NÃºmero mÃ¡ximo keyframe de animaciÃ³n contenido en      |
|            |        |este fichero. Aunque cada secuencia de animaciÃ³n estÃ¡ |
|            |        |compuesta de una serie de keyframes de forma          |
|MAX KEYFRAME|DWORD   |idependiente de las demÃ¡s secuencias, en el fichero   |
|            |        |FBM se guardan todos los keyframes de todas las       |
|            |        |animaciones en un array comÃºn. Este valor contendrÃ¡   |
|            |        |el nÃºmero total de keyframes que contiene el FBM,     |
|____________|________|menos_uno.____________________________________________|
|MAX POINT   |DWORD   |MÃ¡ximo valor de Ã­ndice para un punto de control que   |
|____________|________|contenga_el_grÃ¡fico.__________________________________|
|            |        |NÃºmero de puntos de control que hay guardados en este |
|            |        |fichero. Un FBM puede tener un sÃ³lo punto de control  |
|POINTS      |DWORD   |aunque Ã©ste tuviese el Ã­ndice 90, por ejemplo. Este   |
|            |        |valor se refiere exactamente al nÃºmero de estructuras |
|            |        |de punto de control guardadas mÃ¡s adelante en el FBM. |
|____________|________|Puede_ser_cero._______________________________________|

Paleta de colores

A continuaciÃ³n, si el grÃ¡fico es de 8 bits (tal como indica la cabecera del
fichero) y sÃ³lo en ese caso, aparecen 768 bytes con la paleta de colores. Cada
color ocupa tres bytes en orden RGB (rojo, verde y azul) y con un rango para
cada componente de color de 0 a 255.

Secuencias

A continuaciÃ³n, inmediatamente despuÃ©s de la paleta, si corresponde, o del
descriptor en formatos no paletizados, se guardan las secuencias de animaciÃ³n
del FBM. Puede haber mÃ¡s de una, pero siempre habrÃ¡ al menos una. El valor
"MAX SEQUENCE" del descriptor indica el nÃºmero total de secuencias presentes
en el fichero, menos una.

Cada secuencia de animaciÃ³n ocupa 44 bytes en el fichero, y su estructura es
la siguiente:
 ____________________________________________________________________________
|Nombre_____________|TamaÃ±o__|DescripciÃ³n____________________________________|
|                   |        |Nombre de la animaciÃ³n, en ASCIIZ. Si ocupa    |
|NOMBRE             |32 bytes|exactamente 32 bytes, el cero terminal no se   |
|___________________|________|guarda_en_el_fichero.__________________________|
|                   |        |Ãndice del primer keyframe, en el array global |
|PRIMER KEYFRAME    |DWORD   |que se guarda en el fichero, de los que        |
|___________________|________|componen_la_animaciÃ³n._________________________|
|                   |        |Ãndice del Ãºltimo keyframe. Este valor debe    |
|                   |        |ser siempre mayor o igual al anterior (una     |
|                   |        |animaciÃ³n debe contener al menos un keyframe). |
|ÃLTIMO KEYFRAME    |DWORD   |AdemÃ¡s, dos secuencias de animaciÃ³n no pueden  |
|                   |        |compartir un mismo keyframe, ni se permite que |
|                   |        |hayan keyframes guardados en el fichero que no |
|___________________|________|correspondan_a_nada.___________________________|
|                   |        |Ãndice de la secuencia siguiente a esta, o -1  |
|                   |        |si la secuencia no estÃ¡ enlazada con otra.     |
|                   |        |Una secuencia de animaciÃ³n puede terminar de   |
|                   |        |tres maneras:                                  |
|                   |        |    * Looping: el nÃºmero de siguiente secuencia|
|                   |        |      es su propio Ã­ndice dentro del array de  |
|                   |        |      secuencias.                              |
|SIGUIENTE SECUENCIA|INT     |    * Stop: este nÃºmero es -1. Al acabar la    |
|                   |        |      animaciÃ³n, Ã©sta se detiene. Esta         |
|                   |        |      condiciÃ³n puede comprobarse desde el     |
|                   |        |      lenguaje en Fenix, y actuar en           |
|                   |        |      consecuencia.                            |
|                   |        |    * Link: al acabar la animaciÃ³n, se inicia  |
|                   |        |      automÃ¡ticamente otra dentro del FBM, cuyo|
|___________________|________|______Ã­ndice_aparece_en_este_campo.____________|

Keyframes

Un keyframe es uno de los "momentos" de los que se compone una animaciÃ³n.
Contiene un nÃºmero de frame y opciones adicionales que pueden emplearse para
automatizar tareas comunes enlazadas con la animaciÃ³n, como asignar un Ã¡ngulo
o flags al proceso.

Cada keyframe ocupa 16 bytes en el fichero y contiene la siguiente
informaciÃ³n:
 ____________________________________________________________________________
|Nombre|TamaÃ±o|DescripciÃ³n___________________________________________________|
|FRAME_|DWORD__|Ãndice_de_frame_del_grÃ¡fico_FBM_que_debe_mostrarse.__________|
|      |       |Ãngulo con el cual se mostrarÃ¡ el grÃ¡fico. Este Ã¡ngulo se    |
|ANGLE |INT    |sumarÃ¡ al indicado en el proceso para obtener el Ã¡ngulo      |
|______|_______|final_de_visualizaciÃ³n.______________________________________|
|      |       |Flags de visualizaciÃ³n. Estas flags se complementan (con un  |
|      |       |XOR) con del proceso, por lo que un proceso que dibuje con   |
|FLAGS |DWORD  |espejo horizontal un grÃ¡fico en cuya animaciÃ³n aparezca un   |
|      |       |keyframe invertido horizontalmente, se verÃ¡ correctamente    |
|      |       |(este keyframe en concreto se verÃ¡ normal, al anularse       |
|______|_______|mutuamente_los_dos_flags).___________________________________|
|      |       |Pausa en milisegundos antes del siguiente keyframe. Si este  |
|PAUSA |DWORD  |keyframe es el Ãºltimo de la animaciÃ³n, indica el tiempo en   |
|      |       |milisegundos que deben transcurrir hasta que la animaciÃ³n    |
|______|_______|termine._____________________________________________________|

Puntos de control

A continuaciÃ³n en el fichero se almacenan los puntos de control, tantos como
indique el valor PUNTOS en el descriptor. Es posible que esta secciÃ³n no estÃ©
presente si ese valor es cero. En todo caso, cada punto de control es una
estructura de 12 bytes que contiene:
 ____________________________________________________________________________
|Nombre_|TamaÃ±o|DescripciÃ³n__________________________________________________|
|       |       |Ãndice del punto de control, de 0 a 999. El 0 indica centro |
|ÃNDICE |DWORD  |del grÃ¡fico, y si no lo incluye, se considerarÃ¡ su centro   |
|_______|_______|geomÃ©trico_para_tal_fin.____________________________________|
|       |       |Coordenada X del punto de control. Puede ser negativa o mÃ¡s |
|X      |INT    |grande que el grÃ¡fico, pero actualmente el rango soportado  |
|_______|_______|es_estrictamente_entre_-32766_y_32766_inclusives.___________|
|Y______|INT____|Coordenada_Y,_con_las_mismas_condiciones_que_X._____________|

Datos del grÃ¡fico

Por Ãºltimo, aparecen los datos del grÃ¡fico propiamente dichos, de arriba a
abajo. En primer lugar se guardan todas las filas del primer frame, a
continuaciÃ³n todas las filas del segundo, y asÃ­ hasta almacenar todos los
frames del grÃ¡fico, hasta el nÃºmero de Ã­ndice indicado en el descriptor.

En un grÃ¡fico de 1 bit por pixel, cada fila incluye padding (bits a 0) hasta
ocupar un ancho mÃºltiplo de un byte.

En un grÃ¡fico de 8 bits el valor 0 estÃ¡ reservado para los pixels
transparentes.

En un grÃ¡fico de 16 bits, cada pixel se guarda en formato RGB565 con el valor
0 reservado para los pixels transparentes (lo cual significa que el color negro
puro no puede usarse, siendo necesario sustituirlo por un valor aproximado).

En todo caso, cualquier informaciÃ³n adicional que aparezca en el fichero
despuÃ©s de los datos del grÃ¡fico es ignorada. Esto permite realizar
extensiones futuras del formato sin perder la compatibilidad hacia atrÃ¡s.

NOTAS

Esta es una versiÃ³n temporal de este formato de fichero. Los grÃ¡ficos con
profundidad de color de 24 bits se soportarÃ¡n prÃ³ximamente en los ficheros
FBM.

Obtenido de http://fenixworld.se32.com/fenixwiki/
Disponible bajo los tÃ©rminos de la GNU Free Documentation License 1.2
