#! /bin/sh /usr/share/dpatch/dpatch-run
## 30_amd64_null.dpatch by Adrian Knoth <adi@drcomp.erfurt.thur.de>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -Nur tcm-2.20+TSQD.orig/src/dg/diagramstubs.c tcm-2.20+TSQD/src/dg/diagramstubs.c
--- tcm-2.20.orig/src/dg/diagramstubs.c	2004-07-21 19:47:43.000000000 +0200
+++ tcm-2.20/src/dg/diagramstubs.c	2006-04-02 15:13:09.000000000 +0200
@@ -35,7 +35,7 @@
 	// 'unset' event of a toggle button should be discarded.
 	if (XmToggleButtonGetState(w)) {
 		int num;
-		XtVaGetValues(w, XmNuserData, &num, 0);
+		XtVaGetValues(w, XmNuserData, &num, NULL);
 		((Diagram *)cd)->UpdateNodeType((int)num);
 	}
 }
@@ -44,7 +44,7 @@
 	// 'unset' event of a toggle button should be discarded.
 	if (XmToggleButtonGetState(w)) {
 		int num;
-		XtVaGetValues(w, XmNuserData, &num, 0);
+		XtVaGetValues(w, XmNuserData, &num, NULL);
 		((Diagram *)cd)->UpdateEdgeType((int)num);
 	}
 }
@@ -131,7 +131,7 @@
 void DiagramStubs::DefaultNodeLineStyleCB(Widget w, XtPointer cd, XtPointer) {
 	if (XmToggleButtonGetState(w)) {
 		int n;
-		XtVaGetValues(w, XmNuserData, &n, 0);
+		XtVaGetValues(w, XmNuserData, &n, NULL);
 		n = n/2;
 		LineStyle::Type i = LineStyle::SOLID;
 		if (n == 1)
@@ -147,7 +147,7 @@
 void DiagramStubs::DefaultEdgeLineStyleCB(Widget w, XtPointer cd, XtPointer) {
 	if (XmToggleButtonGetState(w)) {
 		int n;
-		XtVaGetValues(w, XmNuserData, &n, 0);
+		XtVaGetValues(w, XmNuserData, &n, NULL);
 		n = n/2;
 		LineStyle::Type i = LineStyle::SOLID;
 		if (n == 1)
@@ -170,7 +170,7 @@
 
 void DiagramStubs::UpdateNodeShapeTypeCB(Widget w, XtPointer cd, XtPointer) {
         int num;
-        XtVaGetValues(w, XmNuserData, &num, 0);
+        XtVaGetValues(w, XmNuserData, &num, NULL);
         ((DiagramViewer *)cd)->UpdateNodeShapeType(num);
 }
 
diff -Nur tcm-2.20+TSQD.orig/src/dg/diagramwindow.c tcm-2.20+TSQD/src/dg/diagramwindow.c
--- tcm-2.20.orig/src/dg/diagramwindow.c	2004-07-21 19:46:02.000000000 +0200
+++ tcm-2.20/src/dg/diagramwindow.c	2006-04-02 15:13:09.000000000 +0200
@@ -135,15 +135,15 @@
 	SetScaleValue(CreateScaleValue(parent));
 	XtVaSetValues(GetStatusArea(),
 		XmNleftAttachment, XmATTACH_OPPOSITE_WIDGET,
-		XmNleftWidget, GetScrolledWindow(), 0);
+		XmNleftWidget, GetScrolledWindow(), NULL);
 	XtVaSetValues(GetScrolledWindow(),
 		XmNleftAttachment, XmATTACH_WIDGET,
 		XmNleftWidget, tiles,
 		XmNbottomAttachment, XmATTACH_WIDGET,
-		XmNbottomWidget, GetArrowButtons(), 0);
+		XmNbottomWidget, GetArrowButtons(), NULL);
 	// XtVaSetValues(tiles,
 	// 	XmNbottomAttachment, XmATTACH_WIDGET,
-	// 	XmNbottomWidget, GetArrowButtons(), 0);
+	// 	XmNbottomWidget, GetArrowButtons(), NULL);
 }
 
 Widget DiagramWindow::CreateTiles(Widget parent) {
@@ -157,7 +157,7 @@
 		XmNtopWidget, GetDocumentArea(),
 		XmNleftAttachment, XmATTACH_FORM,
 		XmNadjustLast, True,
-		0);
+		NULL);
 	CalcIconColumns();
 	CreateNodeIcons(t);
 	CreateEdgeIcons(t);
@@ -202,12 +202,12 @@
 	// create a frame: for nodes
 	Widget frame = XtVaCreateWidget("TilesFrame1",
 		xmFrameWidgetClass, t,
-		XmNshadowType, XmSHADOW_ETCHED_IN, 0);
+		XmNshadowType, XmSHADOW_ETCHED_IN, NULL);
 
 	// create a rowcolumn for nodes
 	nodeIconsRC = XtVaCreateWidget("NodeIconsRC", xmRowColumnWidgetClass, 
 		frame, XmNentryAlignment, 
-		XmALIGNMENT_CENTER, 0);
+		XmALIGNMENT_CENTER, NULL);
 
 	// make scrollbars when there are many icons.
 	if (iconColumns > 2) {
@@ -220,16 +220,16 @@
                 	XmNheight, 
 				GetIconsScrollHeight((nrNodes-1)/iconColumns + 1),
                 	XmNscrollingPolicy, XmAUTOMATIC,
-                	XmNscrollBarDisplayPolicy, XmAS_NEEDED, 0);
+                	XmNscrollBarDisplayPolicy, XmAS_NEEDED, NULL);
 
 		Widget clipWindow;
-		XtVaGetValues(scrolledWin, XmNclipWindow, &clipWindow, 0);
-		XtVaSetValues(clipWindow, XmNborderWidth, 0, 0);
+		XtVaGetValues(scrolledWin, XmNclipWindow, &clipWindow, NULL);
+		XtVaSetValues(clipWindow, XmNborderWidth, NULL, NULL);
 	}
 
         XtVaCreateManagedWidget("nodes",
                         xmLabelWidgetClass, frame,
-                        XmNchildType, XmFRAME_TITLE_CHILD, 0);
+                        XmNchildType, XmFRAME_TITLE_CHILD, NULL);
 	XtSetArg(args[i], XmNradioAlwaysOne, True); i++;
 	XtSetArg(args[i], XmNnumColumns, iconColumns); i++;
         XtSetArg(args[i], XmNadjustLast, False); i++;
@@ -246,7 +246,7 @@
 			   // the first button is set by default
 			XmNset, i == 0? True: False, 
 			XmNhighlightThickness, 0,
-			XmNalignment, XmALIGNMENT_CENTER, 0);
+			XmNalignment, XmALIGNMENT_CENTER, NULL);
 		pixmap = nodeIcons[i].CreatePixmap(pb, GetDisplay());
 		XtVaSetValues(pb,
 			XmNlabelType, XmPIXMAP,
@@ -254,7 +254,7 @@
 			XmNuserData, (XtPointer)(i+1),
 					// determines widget for which the
 					// callback is involved.
-			0);
+			NULL);
 		XtAddCallback(pb, XmNvalueChangedCallback, 
 			DiagramStubs::SetNodeCB, (XtPointer)GetDocument());
 		AddLiteClue(pb, (char *)nodeNames[i]);
@@ -275,15 +275,15 @@
 	// create a frame: for edges
 	Widget frame = XtVaCreateWidget("TilesFrame2",
 		xmFrameWidgetClass, t,
-		XmNshadowType, XmSHADOW_ETCHED_IN, 0);
+		XmNshadowType, XmSHADOW_ETCHED_IN, NULL);
 	// create a rowcolumn of edges
 	edgeIconsRC = XtVaCreateWidget("EdgeIconsRC", xmRowColumnWidgetClass, 
 		frame, XmNentryAlignment, XmALIGNMENT_CENTER,
-		0);
+		NULL);
 	// create a label for edges
         XtVaCreateManagedWidget("edges",
                         xmLabelWidgetClass, frame,
-                        XmNchildType, XmFRAME_TITLE_CHILD, 0);
+                        XmNchildType, XmFRAME_TITLE_CHILD, NULL);
 	
 	XtSetArg(args[i], XmNradioAlwaysOne, True); i++;
 	XtSetArg(args[i], XmNnumColumns, iconColumns); i++;
@@ -298,13 +298,13 @@
 			xmToggleButtonWidgetClass, rb,
 			XmNset, i == 0? True: False,
 			XmNhighlightThickness, 0,
-			XmNalignment, XmALIGNMENT_CENTER, 0);
+			XmNalignment, XmALIGNMENT_CENTER, NULL);
 		pixmap = edgeIcons[i].CreatePixmap(pb, GetDisplay());
 		XtVaSetValues(pb,
 			XmNlabelType, XmPIXMAP,
 			XmNlabelPixmap, pixmap, 
 			XmNuserData, (XtPointer)(i+1),
-			0);
+			NULL);
 		XtAddCallback(pb, XmNvalueChangedCallback, 
 			DiagramStubs::SetEdgeCB, (XtPointer)GetDocument());
 		AddLiteClue(pb, (char *)edgeNames[i]);
@@ -318,7 +318,7 @@
 		// create a button for the curve toggle
 		pb = XtVaCreateWidget("create curve", xmToggleButtonWidgetClass, rb,
 			XmNhighlightThickness, 0,
-			XmNalignment, XmALIGNMENT_CENTER, 0);
+			XmNalignment, XmALIGNMENT_CENTER, NULL);
 		XtAddCallback(pb, XmNvalueChangedCallback, 
 			DiagramStubs::SetCurveCB, (XtPointer)GetDocument());
 		AddLiteClue(pb, "When on, curved edges are created");
@@ -333,7 +333,7 @@
 void DiagramWindow::CreateLineStyleOptionMenu(Widget w, bool nodes, 
 						bool minimize) {
 	Widget frame1 = XtVaCreateManagedWidget("LineStyleFrame",
-                        xmFrameWidgetClass, w, 0);
+                        xmFrameWidgetClass, w, NULL);
 	Menu *menu;
 	string label;
 
@@ -348,7 +348,7 @@
 			label = "line style";
 			XtVaCreateManagedWidget(label.getstr(),
 				xmLabelWidgetClass, frame1,
-				XmNchildType, XmFRAME_TITLE_CHILD, 0);
+				XmNchildType, XmFRAME_TITLE_CHILD, NULL);
 		}
 	}
 	else {	// edges
@@ -362,7 +362,7 @@
 			label = "line style";
 			XtVaCreateManagedWidget(label.getstr(),
 				xmLabelWidgetClass, frame1,
-				XmNchildType, XmFRAME_TITLE_CHILD, 0);
+				XmNchildType, XmFRAME_TITLE_CHILD, NULL);
 		}
 	}
 	XtManageChild(menu->GetWidget());
@@ -399,7 +399,7 @@
 		documentItems);
 	helpMenu = new Menu(bar, Menu::PULLDOWN, "Help", 0, helpItems);
 	// tell bar which bar which button is the help menu
-	XtVaSetValues(bar, XmNmenuHelpWidget, helpMenu->GetWidget(), 0);
+	XtVaSetValues(bar, XmNmenuHelpWidget, helpMenu->GetWidget(), NULL);
 	// Bar is done -- manage it
 	XtManageChild(bar);
 	return bar;
@@ -760,7 +760,7 @@
 					xmToggleButtonWidgetClass, rb,
 		XmNhighlightThickness, 0,
 		XmNset, viewer->IsShowIndexes(),
-		XmNalignment, XmALIGNMENT_CENTER, 0);
+		XmNalignment, XmALIGNMENT_CENTER, NULL);
 	XtAddCallback(pb, XmNvalueChangedCallback,
 			DiagramStubs::ShowIndexesCB, (XtPointer)viewer);
 	AddLiteClue(pb, "When on, new nodes get an index");
@@ -795,6 +795,6 @@
 	DrawWindow::SetHierarchic(s);
 	Widget w1 = editMenu->GetMenuItem("Duplicate");
 	if ( w1 )
-		XtVaSetValues(w1, XmNsensitive, ! s, 0);
+		XtVaSetValues(w1, XmNsensitive, ! s, NULL);
 	GetDrawingArea()->Enable("Duplicate", ! s);
 }
diff -Nur tcm-2.20+TSQD.orig/src/ed/drawingarea.c tcm-2.20+TSQD/src/ed/drawingarea.c
--- tcm-2.20.orig/src/ed/drawingarea.c	2004-07-21 19:51:35.000000000 +0200
+++ tcm-2.20/src/ed/drawingarea.c	2006-04-02 15:13:09.000000000 +0200
@@ -75,11 +75,11 @@
 		XmNheight, height,
 		XmNwidth, width,
 		XmNresizePolicy, XmNONE, // remain this a fixed size
-		0));
+		NULL));
 	// set up destruction handler.
 	InstallDestroyHandler();
 	// convert drawing area back to pixels to get its width and height
-	XtVaSetValues(GetWidget(), XmNunitType, XmPIXELS, 0);
+	XtVaSetValues(GetWidget(), XmNunitType, XmPIXELS, NULL);
 	XtAddCallback(GetWidget(), XmNexposeCallback, DrawCB, this);
 	XtAddCallback(GetWidget(), XmNresizeCallback, DrawCB, this);
 	XtAddCallback(GetWidget(), XmNinputCallback, DrawCB, this);
@@ -107,13 +107,13 @@
 
 Pixel DrawingArea::GetBackgroundColor() {
 	Pixel p;
-	XtVaGetValues(GetWidget(), XmNbackground, &p, 0);
+	XtVaGetValues(GetWidget(), XmNbackground, &p, NULL);
 	return p;
 }
 
 Pixel DrawingArea::GetForegroundColor() {
 	Pixel p;
-	XtVaGetValues(GetWidget(), XmNforeground, &p, 0);
+	XtVaGetValues(GetWidget(), XmNforeground, &p, NULL);
 	return p;
 }
 
@@ -162,7 +162,7 @@
 //		// make "Duplicate" command insensitive.
 //		Widget w1 = popupMenu->GetMenuItem("Duplicate");
 //		if (w1)
-//			XtVaSetValues(w1, XmNsensitive, False, 0);
+//			XtVaSetValues(w1, XmNsensitive, False, NULL);
 //	}
 }
 
@@ -374,26 +374,26 @@
 void DrawingArea::EnableUndo(bool flag) {
 	Widget undoMenuItem = popupMenu->GetMenuItem("Undo");
 	if (undoMenuItem)
-		XtVaSetValues(undoMenuItem, XmNsensitive, flag, 0);
+		XtVaSetValues(undoMenuItem, XmNsensitive, flag, NULL);
 }
 
 void DrawingArea::EnableRedo(bool flag) {
 	Widget redoMenuItem = popupMenu->GetMenuItem("Redo");
 	if (redoMenuItem)
-		XtVaSetValues(redoMenuItem, XmNsensitive, flag, 0);
+		XtVaSetValues(redoMenuItem, XmNsensitive, flag, NULL);
 }
 
 void DrawingArea::Enable(const char *label, bool flag) {
 	Widget menuItem = popupMenu->GetMenuItem(label);
 	if (menuItem)
-		XtVaSetValues(menuItem, XmNsensitive, flag, 0);
+		XtVaSetValues(menuItem, XmNsensitive, flag, NULL);
 }
 
 void DrawingArea::SetUndoName(const char *undoname) {
 	XmString s = CreateXmString(undoname);
 	Widget undoMenuItem = popupMenu->GetMenuItem("Undo");
 	if (undoMenuItem)
-		XtVaSetValues(undoMenuItem, XmNlabelString, s, 0);
+		XtVaSetValues(undoMenuItem, XmNlabelString, s, NULL);
 	XmStringFree(s);
 }
 
@@ -401,7 +401,7 @@
 	XmString s = CreateXmString(redoname);
 	Widget redoMenuItem = popupMenu->GetMenuItem("Redo");
 	if (redoMenuItem)
-		XtVaSetValues(redoMenuItem, XmNlabelString, s, 0);
+		XtVaSetValues(redoMenuItem, XmNlabelString, s, NULL);
 	XmStringFree(s);
 }
 
diff -Nur tcm-2.20+TSQD.orig/src/ed/drawwindow.c tcm-2.20+TSQD/src/ed/drawwindow.c
--- tcm-2.20.orig/src/ed/drawwindow.c	2004-07-21 19:51:36.000000000 +0200
+++ tcm-2.20/src/ed/drawwindow.c	2006-04-02 15:13:09.000000000 +0200
@@ -118,28 +118,28 @@
 		XmNwidth, scrollWidth,
 		XmNscrollingPolicy, XmAUTOMATIC,
 		XmNscrollBarDisplayPolicy, XmAS_NEEDED,
-		XmNrightAttachment, XmATTACH_FORM, 0);
+		XmNrightAttachment, XmATTACH_FORM, NULL);
 	if (GetDocumentArea())
 		XtVaSetValues(sw, 
 			XmNtopAttachment, XmATTACH_WIDGET,
-			XmNtopWidget, GetDocumentArea(), 0);
+			XmNtopWidget, GetDocumentArea(), NULL);
 	if (GetLogo())
 		XtVaSetValues(sw, 
 			XmNtopAttachment, XmATTACH_WIDGET,
-			XmNtopWidget, GetLogo(), 0);
+			XmNtopWidget, GetLogo(), NULL);
 	if (GetStatusArea())
 		XtVaSetValues(GetStatusArea(),
 			XmNtopAttachment, XmATTACH_WIDGET,
-			XmNtopWidget, sw, 0);
+			XmNtopWidget, sw, NULL);
 	else if (GetControlArea())
 		XtVaSetValues(sw, 
 			XmNbottomAttachment, XmATTACH_WIDGET,
-			XmNbottomWidget, GetControlArea(), 0);
+			XmNbottomWidget, GetControlArea(), NULL);
 	else
 		XtVaSetValues(sw, 
-			XmNbottomAttachment, XmATTACH_FORM, 0);
-	XtVaGetValues(sw, XmNverticalScrollBar, &verticalScrollBar, 0);
-	XtVaGetValues(sw, XmNhorizontalScrollBar, &horizontalScrollBar, 0);
+			XmNbottomAttachment, XmATTACH_FORM, NULL);
+	XtVaGetValues(sw, XmNverticalScrollBar, &verticalScrollBar, NULL);
+	XtVaGetValues(sw, XmNhorizontalScrollBar, &horizontalScrollBar, NULL);
 	return sw;
 }
 
@@ -156,14 +156,14 @@
 		XmNminimum, &vminimum,
 		XmNpageIncrement, &vpage_incr,
 		XmNsliderSize, &vslider_size,
-		XmNvalue, &vvalue, 0);
+		XmNvalue, &vvalue, NULL);
 	XtVaGetValues(horizontalScrollBar,
 		XmNincrement, &hincrement,
 		XmNmaximum, &hmaximum,
 		XmNminimum, &hminimum,
 		XmNpageIncrement, &hpage_incr,
 		XmNsliderSize, &hslider_size,
-		XmNvalue, &hvalue, 0);
+		XmNvalue, &hvalue, NULL);
 	hvalue = min(hmaximum-hslider_size, max(0, (x - hslider_size/2)));
 	XmScrollBarSetValues(horizontalScrollBar, hvalue, hslider_size,
 			hincrement, hpage_incr, True);
@@ -182,7 +182,7 @@
 //		XmNminimum, &minimum,
 //		XmNpageIncrement, &page_incr,
 //		XmNsliderSize, &slider_size,
-//		XmNvalue, &value, 0);
+//		XmNvalue, &value, NULL);
 //}
 //
 
@@ -193,7 +193,7 @@
 		xmLabelWidgetClass, parent,
 		XmNtopAttachment, XmATTACH_WIDGET,
 		XmNtopWidget, scrolledWindow,
-		XmNrightAttachment, XmATTACH_FORM, 0);
+		XmNrightAttachment, XmATTACH_FORM, NULL);
 	// XtAddCallback(z, XmNactivateCallback, get_sb, verticalScrollBar);
 	AddLiteClue(z, 
 		"Current scale percentage (Alt+L = larger, Alt+S = smaller)");
@@ -205,7 +205,7 @@
 		string text = "Scale: ";
 		text += s;
 		XmString label = CreateXmString(text.getstr());
-		XtVaSetValues(scaleValue, XmNlabelString, label, 0);
+		XtVaSetValues(scaleValue, XmNlabelString, label, NULL);
 		XmStringFree(label);
 	}
 }
@@ -217,7 +217,7 @@
 	if (arrowButtons)
 		XtVaSetValues(rc, XmNleftAttachment, XmATTACH_WIDGET,
 			XmNleftOffset, 20,
-			XmNleftWidget, arrowButtons, 0);
+			XmNleftWidget, arrowButtons, NULL);
 	autoResizeToggle = CreateToggle(rc, "autoresizing", 
 			GetConfig()->GetAutoResizing(), 
 			EditStubs::SetAutoResizeCB, 
@@ -241,20 +241,20 @@
 		hierarchicToggle = 0;
 	XtVaCreateManagedWidget("   Directory: ",
 		xmLabelWidgetClass, rc,
-		XmNalignment, XmALIGNMENT_BEGINNING, 0);
+		XmNalignment, XmALIGNMENT_BEGINNING, NULL);
 	Widget dn = XtVaCreateManagedWidget("DirectoryName",
 		xmTextFieldWidgetClass, rc,
 		XmNeditable, True,
-		XmNcursorPositionVisible, True, 0);
+		XmNcursorPositionVisible, True, NULL);
 	SetDirName(dn);
 	AddLiteClue(dn, "Current project directory. Can be changed "
 		"(apply with <enter>)");
 	if (GetScreenType() <= SVGA)
-		XtVaSetValues(dn, XmNcolumns, 28, 0);
+		XtVaSetValues(dn, XmNcolumns, 28, NULL);
 	else if (GetScreenType() == XVGA)
-		XtVaSetValues(dn, XmNcolumns, 34, 0);
+		XtVaSetValues(dn, XmNcolumns, 34, NULL);
 	else
-		XtVaSetValues(dn, XmNcolumns, 40, 0);
+		XtVaSetValues(dn, XmNcolumns, 40, NULL);
 	XtAddCallback(dn, XmNactivateCallback,
 		EditStubs::ChangeDirCB, (XtPointer)GetDocument());
 	XtManageChild(rc);
@@ -265,10 +265,10 @@
 	Widget frame = XtVaCreateManagedWidget("ArrowsFrame",
 		xmFrameWidgetClass, parent, 
 		XmNbottomAttachment, XmATTACH_FORM,
-		XmNleftAttachment, XmATTACH_FORM, 0);
+		XmNleftAttachment, XmATTACH_FORM, NULL);
 	Widget form = XtVaCreateManagedWidget("ArrowsForm", 
 		xmFormWidgetClass, frame, 
-		XmNfractionBase, 3, 0);
+		XmNfractionBase, 3, NULL);
 	Widget a1 = XtVaCreateManagedWidget(
 		"arrow1", xmArrowButtonWidgetClass, form,
 		XmNtopPosition, 0,
@@ -280,7 +280,7 @@
 		XmNrightAttachment, XmATTACH_POSITION,
 		XmNleftAttachment, XmATTACH_POSITION,
 		XmNarrowDirection, XmARROW_UP,
-		XmNuserData, Document::UP, 0);
+		XmNuserData, Document::UP, NULL);
 	Widget a2 = XtVaCreateManagedWidget(
 		"arrow2", xmArrowButtonWidgetClass, form,
 		XmNtopPosition, 1,
@@ -292,7 +292,7 @@
 		XmNrightAttachment, XmATTACH_POSITION,
 		XmNleftAttachment, XmATTACH_POSITION,
 		XmNarrowDirection, XmARROW_LEFT,
-		XmNuserData, (XtPointer)Document::LEFT, 0);
+		XmNuserData, (XtPointer)Document::LEFT, NULL);
 	Widget a3 = XtVaCreateManagedWidget(
 		"arrow3", xmArrowButtonWidgetClass, form,
 		XmNtopPosition, 1,
@@ -304,7 +304,7 @@
 		XmNrightAttachment, XmATTACH_POSITION,
 		XmNleftAttachment, XmATTACH_POSITION,
 		XmNarrowDirection, XmARROW_RIGHT,
-		XmNuserData, (XtPointer)Document::RIGHT, 0);
+		XmNuserData, (XtPointer)Document::RIGHT, NULL);
 	Widget a4 = XtVaCreateManagedWidget(
 		"arrow4", xmArrowButtonWidgetClass, form,
 		XmNtopPosition, 2,
@@ -316,7 +316,7 @@
 		XmNrightAttachment, XmATTACH_POSITION,
 		XmNleftAttachment, XmATTACH_POSITION,
 		XmNarrowDirection, XmARROW_DOWN,
-		XmNuserData, (XtPointer)Document::DOWN, 0);
+		XmNuserData, (XtPointer)Document::DOWN, NULL);
 	XmString c = CreateXmString("C");
 	Widget a5 = XtVaCreateManagedWidget(
 		"arrow5", xmPushButtonWidgetClass, form,
@@ -329,7 +329,7 @@
 		XmNbottomAttachment, XmATTACH_POSITION,
 		XmNrightAttachment, XmATTACH_POSITION,
 		XmNleftAttachment, XmATTACH_POSITION,
-		XmNuserData, (XtPointer)Document::CENTER, 0);
+		XmNuserData, (XtPointer)Document::CENTER, NULL);
 	XmStringFree(c);
 	AddLiteClue(a1, "Move the document one step up");
 	AddLiteClue(a2, "Move the document one step left");
@@ -415,18 +415,18 @@
 
 void DrawWindow::SetAutoResize(bool set) {
 	if (autoResizeToggle)
-		XtVaSetValues(autoResizeToggle, XmNset, set, 0);
+		XtVaSetValues(autoResizeToggle, XmNset, set, NULL);
 }
 
 void DrawWindow::SetInlineEdit(bool set) {
 	if (inlineEditToggle)
-		XtVaSetValues(inlineEditToggle, XmNset, set, 0); 
+		XtVaSetValues(inlineEditToggle, XmNset, set, NULL); 
 }
 
 
 /* virtual */ void DrawWindow::SetHierarchic(bool set) {
 	if ( hierarchicToggle )
-		XtVaSetValues(hierarchicToggle, XmNset, set, 0);
+		XtVaSetValues(hierarchicToggle, XmNset, set, NULL);
 }
 
 
@@ -771,5 +771,5 @@
                 return;
         Widget docMenuItem = documentMenu->GetMenuItem("Document Source...");
         if (docMenuItem)
-                XtVaSetValues(docMenuItem, XmNsensitive, flag, 0);
+                XtVaSetValues(docMenuItem, XmNsensitive, flag, NULL);
 }
diff -Nur tcm-2.20+TSQD.orig/src/ed/editstubs.c tcm-2.20+TSQD/src/ed/editstubs.c
--- tcm-2.20.orig/src/ed/editstubs.c	2004-07-21 19:51:38.000000000 +0200
+++ tcm-2.20/src/ed/editstubs.c	2006-04-02 15:13:09.000000000 +0200
@@ -41,7 +41,7 @@
 
 void EditStubs::HelpCB(Widget w, XtPointer cd, XtPointer) {
 	Helper::HelpTopicType tp;
-	XtVaGetValues(w, XmNuserData, &tp, 0);
+	XtVaGetValues(w, XmNuserData, &tp, NULL);
 	((Helper *)cd)->Help(tp);
 }
 
@@ -207,7 +207,7 @@
 
 void EditStubs::MoveCB(Widget w, XtPointer cd, XtPointer) {
 	int num;
-	XtVaGetValues(w, XmNuserData, &num, 0);
+	XtVaGetValues(w, XmNuserData, &num, NULL);
 	((Document *)cd)->Move((Document::MoveType)num);
 }
 
@@ -351,7 +351,7 @@
 void EditStubs::PageOrientationCB(Widget w, XtPointer cd, XtPointer) {
 	if (XmToggleButtonGetState(w)) {
 		int num;
-		XtVaGetValues(w, XmNuserData, &num, 0);
+		XtVaGetValues(w, XmNuserData, &num, NULL);
 		((Printer *)cd)->SetPageOrientation(num/2);
 	}
 }
@@ -359,7 +359,7 @@
 void EditStubs::ShowDocumentInfoCB(Widget w, XtPointer cd, XtPointer) {
 	if (XmToggleButtonGetState(w)) {
 		int num;
-		XtVaGetValues(w, XmNuserData, &num, 0);
+		XtVaGetValues(w, XmNuserData, &num, NULL);
 		((Printer *)cd)->ShowInfo(num/2);
 	}
 }
@@ -423,7 +423,7 @@
 void EditStubs::BannerPageCB(Widget w, XtPointer cd, XtPointer) {
 	if (XmToggleButtonGetState(w)) {
 		int num;
-		XtVaGetValues(w, XmNuserData, &num, 0);
+		XtVaGetValues(w, XmNuserData, &num, NULL);
 		((Printer *)cd)->SetBannerPage(num/2);
 	}
 }
@@ -434,7 +434,7 @@
 		// it corresponds
 		XmString xms;
                 xms = CreateXmString("");
-                XtVaGetValues(w, XmNlabelString, &xms, 0);
+                XtVaGetValues(w, XmNlabelString, &xms, NULL);
                 char *txt;
                 if (XmStringGetLtoR(xms, XmFONTLIST_DEFAULT_TAG, &txt)) {
 			string s = txt;
