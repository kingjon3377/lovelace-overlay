--- xword-1.0.orig/test.py
+++ xword-1.0/test.py
@@ -0,0 +1,157 @@
+# Copyright (c) 2009
+#   Dafydd Harries    <daf@rhydd.org>
+# All rights reserved.
+
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are met:
+
+# 1. Redistributions of source code must retain the above copyright notice,
+# this list of conditions and the following disclaimer.
+
+# 2. Redistributions in binary form must reproduce the above copyright notice,
+# this list of conditions and the following disclaimer in the documentation
+# and/or other materials provided with the distribution.
+
+# 3. The names of the contributors may not be used to endorse or promote
+# products derived from this software without specific prior written
+# permission.
+
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+
+import unittest
+
+def read_file(path):
+    fh = file(path)
+    contents = fh.read()
+    fh.close()
+    return contents
+
+def load_module(name, path):
+    # hacketty hack
+
+    mod = __builtins__.__class__(name)
+    code = compile(read_file(path), path, 'exec')
+
+    g, l = {}, {}
+    exec code in g, l
+
+    for k, v in l.iteritems():
+        setattr(mod, k, v)
+
+    return mod
+
+xword = load_module('xword', 'xword')
+
+class TestPuzzle(xword.Puzzle):
+    def __init__(self):
+        # Override Puzzle.__init__ to avoid having to read a file.
+        pass
+
+def dump_map(width, height, m):
+    return ''.join([
+        ' '.join([
+            '%s' % m.get((x, y), '#')
+            for x in xrange(width)]) + '\n'
+        for y in xrange(height)])
+
+class SetupTest(unittest.TestCase):
+    def test_american(self):
+        puzzle = TestPuzzle()
+        puzzle.width = 5
+        puzzle.height = 5
+        puzzle.clues = [
+            'a1', 'd1', 'd2', 'd3', 'a4', 'd5', 'a6', 'd7', 'a8', 'a9']
+        puzzle.responses = dict([
+            ((x, y), ' .'[int(x + y == 4 and x != 2 and y != 2)])
+            for x in xrange(5)
+            for y in xrange(5)])
+
+        puzzle.setup()
+
+        self.assertEquals([], puzzle.clues)
+
+        self.assertEquals(
+            {1: True, 2: False, 3: False, 4: True, 5: False, 6: True, 7: False,
+             8: True, 9: True},
+            puzzle.is_across)
+        self.assertEquals(
+            {8: 'a8', 1: 'a1', 4: 'a4', 6: 'a6', 9: 'a9'},
+            puzzle.across_clues)
+        self.assertEquals(
+            '1 1 1 1 #\n'
+            '4 4 4 # #\n'
+            '6 6 6 6 6\n'
+            '# # 8 8 8\n'
+            '# 9 9 9 9\n',
+            dump_map(puzzle.width, puzzle.height, puzzle.across_map))
+
+        self.assertEquals(
+            {1: True, 2: True, 3: True, 4: False, 5: True, 6: False, 7: True,
+             8: False, 9: False},
+            puzzle.is_down)
+        self.assertEquals(
+            {1: 'd1', 2: 'd2', 3: 'd3', 5: 'd5', 7: 'd7'},
+            puzzle.down_clues)
+        self.assertEquals(
+            '1 2 3 # #\n'
+            '1 2 3 # 5\n'
+            '1 2 3 7 5\n'
+            '1 # 3 7 5\n'
+            '# # 3 7 5\n',
+            dump_map(puzzle.width, puzzle.height, puzzle.down_map))
+
+    def test_british(self):
+        puzzle = TestPuzzle()
+        puzzle.width = 5
+        puzzle.height = 5
+        puzzle.clues = ['a1', 'd1', 'd2', 'd3', 'a4', 'a5']
+        puzzle.responses = dict([
+            ((x, y), ' .'[int(x % 2 != 0 and y % 2 != 0)])
+            for x in xrange(5)
+            for y in xrange(5)])
+
+        puzzle.setup()
+
+        self.assertEquals([], puzzle.clues)
+
+        self.assertEquals(
+            {1: True, 2: False, 3: False, 4: True, 5: True},
+            puzzle.is_across)
+        self.assertEquals(
+            {1: 'a1', 4: 'a4', 5: 'a5'},
+            puzzle.across_clues)
+        self.assertEquals(
+            '1 1 1 1 1\n'
+            '# # # # #\n'
+            '4 4 4 4 4\n'
+            '# # # # #\n'
+            '5 5 5 5 5\n',
+            dump_map(puzzle.width, puzzle.height, puzzle.across_map))
+
+        self.assertEquals(
+            {1: True, 2: True, 3: True, 4: False, 5: False},
+            puzzle.is_down)
+        self.assertEquals(
+            {1: 'd1', 2: 'd2', 3: 'd3'},
+            puzzle.down_clues)
+        self.assertEquals(
+            '1 # 2 # 3\n'
+            '1 # 2 # 3\n'
+            '1 # 2 # 3\n'
+            '1 # 2 # 3\n'
+            '1 # 2 # 3\n',
+            dump_map(puzzle.width, puzzle.height, puzzle.down_map))
+
+if __name__ == '__main__':
+    unittest.main()
+
--- xword-1.0.orig/xword
+++ xword-1.0/xword
@@ -1,7 +1,8 @@
 #!/usr/bin/python
  
-# Copyright (c) 2005-2006,
+# Copyright (c) 2005-2006, 2009
 #   Bill McCloskey    <bill.mccloskey@gmail.com>
+#   Dafydd Harries    <daf@rhydd.org>
 # All rights reserved.
 
 # Redistribution and use in source and binary forms, with or without
@@ -51,7 +52,7 @@
 import pickle
 import ConfigParser
 
-HOME_PATH = os.path.dirname(sys.argv[0])
+HOME_PATH = '/usr/share/games/xword'
 CHECK_ICON = HOME_PATH + '/crossword-check.png'
 CHECK_ALL_ICON = HOME_PATH + '/crossword-check-all.png'
 SOLVE_ICON = HOME_PATH + '/crossword-solve.png'
@@ -263,35 +264,39 @@
         number = 1
         for y in range(self.height):
             for x in range(self.width):
-                is_fresh_x = self.is_black(x-1, y)
-                is_fresh_y = self.is_black(x, y-1)
+                new_across = False
+                new_down = False
 
                 if not self.is_black(x, y):
-                    if is_fresh_x:
-                        self.across_map[x, y] = number
-                        if self.is_black(x+1, y):
-                            self.across_clues[number] = ''
-                        else:
-                            self.across_clues[number] = self.clues.pop(0)
-                    else: self.across_map[x, y] = self.across_map[x-1, y]
+                    if ((x, y) not in self.across_map and
+                            not self.is_black(x+1, y)):
+                        new_across = True
+                        self.across_clues[number] = self.clues.pop(0)
+
+                        for x_ in range(x, self.width):
+                            if self.is_black(x_, y):
+                                break
+
+                            self.across_map[x_, y] = number
                     
-                    if is_fresh_y:
-                        self.down_map[x, y] = number
-                        if self.is_black(x, y+1): # see April 30, 2006 puzzle
-                            self.down_clues[number] = ''
-                        else:
-                            self.down_clues[number] = self.clues.pop(0)
-                    else: self.down_map[x, y] = self.down_map[x, y-1]
-
-                    if is_fresh_x or is_fresh_y:
-                        self.is_across[number] = is_fresh_x
-                        self.is_down[number] = is_fresh_y
+                    if ((x, y) not in self.down_map and
+                            # see April 30, 2006 puzzle
+                            not self.is_black(x, y+1)):
+                        new_down = True
+                        self.down_clues[number] = self.clues.pop(0)
+
+                        for y_ in range(y, self.height):
+                            if self.is_black(x, y_):
+                                break
+
+                            self.down_map[x, y_] = number
+
+                    if new_across or new_down:
+                        self.is_across[number] = new_across
+                        self.is_down[number] = new_down
                         self.number_map[number] = (x, y)
                         self.number_rev_map[x, y] = number
                         number += 1
-                else:
-                    self.across_map[x, y] = 0
-                    self.down_map[x, y] = 0
         self.max_number = number-1
 
     def hashcode(self):
@@ -378,6 +383,14 @@
             if mode == DOWN and self.is_down[n]: break
         return n
 
+    def first_number(self, mode):
+        n = 1
+        while True:
+            if mode == ACROSS and self.is_across[n]: break
+            if mode == DOWN and self.is_down[n]: break
+            n += 1
+        return n
+
     def final_number(self, mode):
         n = self.max_number
         while True:
@@ -934,9 +947,7 @@
         self.selection = []
 
         self.mode = ACROSS
-        (x, y) = (0, 0)
-        if puzzle.is_black(x, y):
-            ((x, y), _) = puzzle.next_cell(0, 0, ACROSS, 1, True)
+        x, y = self.puzzle.number_map[self.puzzle.first_number(ACROSS)]
         self.move_to(x, y)
 
     def connect(self, ev, handler):
@@ -996,8 +1007,15 @@
                 self.do_update('box-update', xp, yp)
 
             self.do_update('title-update')
-            self.do_update('across-update', self.puzzle.number(x, y, ACROSS))
-            self.do_update('down-update', self.puzzle.number(x, y, DOWN))
+
+            if (x, y) not in self.puzzle.mode_maps[self.mode]:
+                self.switch_mode()
+
+            if (x, y) in self.puzzle.across_map:
+                self.do_update('across-update', self.puzzle.number(x, y, ACROSS))
+
+            if (x, y) in self.puzzle.down_map:
+                self.do_update('down-update', self.puzzle.number(x, y, DOWN))
 
     def select_word(self, mode, n):
         if mode <> self.mode: self.switch_mode()
@@ -1023,7 +1041,7 @@
             ((x, y), _) = self.puzzle.next_cell(self.x, self.y,
                                                 self.mode, amt, skip_black)
             self.move_to(x, y)
-        else:
+        elif (self.x, self.y) in self.puzzle.mode_maps[1 - self.mode]:
             self.switch_mode()
 
     def back_space(self):
@@ -1037,7 +1055,7 @@
         n = self.puzzle.incr_number(self.x, self.y, self.mode, incr)
         if n == 0:
             self.switch_mode()
-            if incr == 1: n = 1
+            if incr == 1: n = self.puzzle.first_number(self.mode)
             else: n = self.puzzle.final_number(self.mode)
         (x, y) = self.puzzle.number_map[n]
         (x, y) = self.puzzle.find_blank_cell(x, y, self.mode, 1)
@@ -1683,6 +1701,8 @@
 
     def puzzle_key_event(self, item, event):
         name = gtk.gdk.keyval_name(event.keyval)
+        if name is None:
+            return False
         c = self.control
         if len(name) is 1 and name.isalpha():
             c.input_char(self.skip_filled, name)
--- xword-1.0.orig/debian/compat
+++ xword-1.0/debian/compat
@@ -0,0 +1 @@
+5
--- xword-1.0.orig/debian/xword.menu
+++ xword-1.0/debian/xword.menu
@@ -0,0 +1,2 @@
+?package(xword):needs="X11" section="Games/Puzzles"\
+  title="Xword" command="/usr/games/xword"
--- xword-1.0.orig/debian/rules
+++ xword-1.0/debian/rules
@@ -0,0 +1,76 @@
+#!/usr/bin/make -f
+# Sample debian/rules that uses debhelper. 
+# This file is public domain software, originally written by Joey Hess.
+#
+# This version is for packages that are architecture independent.
+
+# Uncomment this to turn on verbose mode.
+#export DH_VERBOSE=1
+
+build: build-stamp
+build-stamp:
+	dh_testdir
+
+	# Add here commands to compile the package.
+	#$(MAKE)
+
+	touch build-stamp
+
+clean:
+	dh_testdir
+	dh_testroot
+	rm -f build-stamp
+
+	# Add here commands to clean up after the build process.
+	#$(MAKE) clean
+	#$(MAKE) distclean
+
+	dh_clean
+
+install: build
+	dh_testdir
+	dh_testroot
+	dh_clean -k
+	dh_installdirs
+
+# Add here commands to install the package into debian/<packagename>.
+$(MAKE) prefix=`pwd`/debian/`dh_listpackages`/usr install
+
+# Build architecture-independent files here.
+binary-indep: build install
+	dh_testdir
+	dh_testroot
+	dh_installchangelogs
+	dh_installdocs
+#	dh_installexamples
+	dh_installmenu
+#	dh_installdebconf
+#	dh_installlogrotate
+#	dh_installemacsen
+#	dh_installcatalogs
+#	dh_installpam
+	dh_installmime
+#	dh_installinit
+#	dh_installcron
+#	dh_installinfo
+#	dh_installwm
+#	dh_installudev
+#	dh_undocumented
+	dh_installman
+	dh_install
+	dh_link
+	dh_compress
+	dh_fixperms
+#	dh_perl
+#	dh_python
+	dh_installdeb
+	dh_gencontrol
+	dh_md5sums
+	dh_builddeb
+
+# Build architecture-dependent files here.
+binary-arch: build install
+# We have nothing to do by default.
+
+binary: binary-indep binary-arch
+.PHONY: build clean binary-indep binary-arch binary install
--- xword-1.0.orig/debian/xword.desktop
+++ xword-1.0/debian/xword.desktop
@@ -0,0 +1,10 @@
+[Desktop Entry]
+Version=1.0
+Name=Xword
+GenericName=Crossword Puzzles
+Comment=Do crossword puzzles
+Exec=xword
+Terminal=false
+Type=Application
+MimeType=application/x-crossword;
+Categories=Game;LogicGame;
--- xword-1.0.orig/debian/xword.install
+++ xword-1.0/debian/xword.install
@@ -0,0 +1,4 @@
+debian/xword.desktop usr/share/applications
+*.png usr/share/games/xword
+xword usr/games
+debian/xword.1 usr/share/man/man1
--- xword-1.0.orig/debian/xword.sharedmimeinfo
+++ xword-1.0/debian/xword.sharedmimeinfo
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<mime-info xmlns="http://www.freedesktop.org/standards/shared-mime-info">
+  <mime-type type="application/x-crossword">
+    <comment>Crossword puzzle</comment>
+    <glob pattern="*.puz"/>
+  </mime-type>
+</mime-info>
--- xword-1.0.orig/debian/watch
+++ xword-1.0/debian/watch
@@ -0,0 +1,11 @@
+# Example watch control file for uscan
+# Rename this file to "watch" and then you can run the "uscan" command
+# to check for upstream updates and more.
+# See uscan(1) for format
+
+# Compulsory line, this is a version 3 file
+version=3
+
+# Uncomment to examine a Webpage 
+# <Webpage URL> <string match>
+http://x-word.org/ xword-(.*)\.tar\.gz
--- xword-1.0.orig/debian/changelog
+++ xword-1.0/debian/changelog
@@ -0,0 +1,80 @@
+xword (1.0-7) unstable; urgency=low
+
+  * Update Standards-Version to 3.9.1.
+  * Add ${misc:Depends} for debhelper.
+  * Include full text of BSD license since common-licenses/BSD is
+    deprecated. Update copyright year for packaging.
+
+ -- John Sullivan <john@wjsullivan.net>  Wed, 08 Sep 2010 12:02:26 -0700
+
+xword (1.0-6) unstable; urgency=low
+
+  * python-gnomeprint is now gone, so remove Suggest (Closes: #559914).
+
+ -- John Sullivan <john@wjsullivan.net>  Mon, 06 Sep 2010 21:45:17 -0700
+
+xword (1.0-5) unstable; urgency=low
+
+  [ John Sullivan ]
+  * python-gnome2-desktop is going away, so we depend on python-
+    gnomeprint for the gnomeprint module now. Closes: #541554.
+  * Update Standards-Version to 3.8.3.
+  * Remove dh_desktop since it's done through triggers now.
+
+ -- John Sullivan <john@wjsullivan.net>  Sun, 06 Sep 2009 20:20:58 -0400
+
+xword (1.0-4) unstable; urgency=low
+
+  * Patch from Dafydd Harries <daf@rhydd.org> on #526821 to handle
+    British-style crossword layouts. When allocating numbers to cells,
+    allocate a new number to a cell if the cell: 1) is white; 2) has not
+    already been allocated a number; 3) and it is followed by a white
+    cell either to the right or downwards. When allocating a number,
+    allocate the same number to consecutive white cells to the right or
+    downwards. Previously, a new number was always allocated if the cell
+    above or to the left was black.
+  * Patch from Dafydd Harries <daf@rhydd.org> on #526821 to ignore
+    keypresses that can't be named.
+  * Patch from Dafydd Harries <daf@rhydd.org> on #526821 to improve
+    support for British-style crosswords. When switching modes, jump to
+    the first clue of the other mode, not clue 1. In US-style
+    crosswords, both across and down modes have a clue 1, but this
+    assumption breaks in British-style crosswords.
+  * Patch from Dafydd Harries <daf@rhydd.org> on #526821 to improve
+    support for British-style crosswords. When opening a puzzle, move to
+    the first across clue instead of the first white cell. In US-style
+    crosswords, the first white cell is always in an across clue, but
+    this assumption breaks in British-style crosswords.
+  * Patch from Dafydd Harries <daf@rhydd.org> on #526821 to improve
+    support for British-style crosswords. Don't switch mode when moving
+    unless the current cell exists in the other mode. In British-style
+    puzzles, some cells only exist in one of the two modes.
+  * Patch from Dafydd Harries <daf@rhydd.org> to add a basic test suite.
+    Closes: Bug#526821.
+  * Update copyright headers.
+
+ -- John Sullivan <john@wjsullivan.net>  Sun, 28 Jun 2009 00:36:20 -0400
+
+xword (1.0-3) unstable; urgency=low
+
+  * Fix copyright-with-old-dh-make-debian-copyright.
+  * Fix desktop-entry-contains-encoding-key.
+
+ -- John Sullivan <john@wjsullivan.net>  Wed, 18 Mar 2009 23:06:46 -0400
+	
+xword (1.0-2) unstable; urgency=low
+
+  * Update to Standards-Version 3.8.0.
+  * Allow DM upload.
+  * Fix typo in package description.
+  * Change packaging license in copyright to BSD.
+	
+ -- John Sullivan <john@wjsullivan.net>  Thu, 18 Dec 2008 14:51:49 -0500
+	
+xword (1.0-1) unstable; urgency=low
+
+  * Initial release (Closes: #440765)
+  * Adjusted expected icon locations in source
+	
+ -- John Sullivan <john@wjsullivan.net>  Mon, 03 Dec 2007 11:18:10 -0400
+
--- xword-1.0.orig/debian/control
+++ xword-1.0/debian/control
@@ -0,0 +1,16 @@
+Source: xword
+Section: games
+Priority: optional
+Maintainer: John Sullivan <john@wjsullivan.net>
+Build-Depends: debhelper (>= 5)
+Standards-Version: 3.9.1
+DM-Upload-Allowed: yes
+
+Package: xword
+Architecture: all
+Depends: ${misc:Depends}, python, python-gtk2
+Description: Reads and writes crossword puzzles in the Across Lite file format
+ Xword is a GTK+ program that works well for doing crossword puzzles in the
+ Across Lite file format used by The New York Times and others. As well as a
+ clock, it supports printing. It also auto-saves puzzles as you solve them so
+ that you can return to partially completed puzzles.
--- xword-1.0.orig/debian/copyright
+++ xword-1.0/debian/copyright
@@ -0,0 +1,43 @@
+This package was debianized by John Sullivan <john@wjsullivan.net> on
+Mon, 03 Dec 2007 11:18:10 -0400.
+
+The current Debian maintainer is John Sullivan <john@wjsullivan.net>
+
+It was downloaded from http://x-word.org/xword-1.0.tar.gz
+
+Upstream Author: Bill McCloskey <bill.mccloskey@gmail.com>
+
+Copyright (c) 2005,
+  Bill McCloskey    <bill.mccloskey@gmail.com>
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+1. Redistributions of source code must retain the above copyright notice,
+this list of conditions and the following disclaimer.
+
+2. Redistributions in binary form must reproduce the above copyright notice,
+this list of conditions and the following disclaimer in the documentation
+and/or other materials provided with the distribution.
+
+3. The names of the contributors may not be used to endorse or promote
+products derived from this software without specific prior written
+permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGE.
+
+(See http://www.opensource.org/licenses/bsd-license.php)
+
+The Debian packaging is © 2007, 2008, 2009, 2010 John Sullivan
+<john@wjsullivan.net> and is licensed under the same BSD license.
--- xword-1.0.orig/debian/xword.1
+++ xword-1.0/debian/xword.1
@@ -0,0 +1,74 @@
+.\"                                      Hey, EMACS: -*- nroff -*-
+.\" First parameter, NAME, should be all caps
+.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
+.\" other parameters are allowed: see man(7), man(1)
+.TH XWORD 1 "December 3, 2007"
+.\" Please adjust this date whenever revising the manpage.
+.\"
+.\" Some roff macros, for reference:
+.\" .nh        disable hyphenation
+.\" .hy        enable hyphenation
+.\" .ad l      left justify
+.\" .ad b      justify to both left and right margins
+.\" .nf        disable filling
+.\" .fi        enable filling
+.\" .br        insert line break
+.\" .sp <n>    insert n+1 empty lines
+.\" for manpage-specific macros, see man(7)
+.SH NAME
+xword \- do crossword puzzles in the Across Lite format
+.SH SYNOPSIS
+.B xword
+.RI [ puzzlefile.puz ] ...
+.SH DESCRIPTION
+Xword is a GTK program for doing crossword puzzles. It can read and write
+puzzles in the Across Lite file format. Consequently, it works well for doing
+puzzles from The New York Times. As well as a clock, it supports printing. It
+also auto-saves puzzles as you solve them so that you can return to partially
+completed puzzles.
+.SH USAGE
+First, locate a puzzle on the web. The best place to go is the web site of The
+New York Times. However, it costs money to access these puzzles. Free puzzles
+are available from The Houston Chronicle.
+.PP
+After you have found a puzzle, click on it in your web browser. Xword will open
+the puzzle and you can start solving. You can also choose to save the puzzle on
+your hard disk. Then you can open the puzzle using Xword later.
+.PP
+After you have worked on a puzzle for a while, you may want to save your work.
+There are two ways to save. The easiest way is to close Xword without any
+further action. The next time you open the same puzzle (either by opening
+the .puz file or by clicking the same link on the web), you will be asked
+whether you want to continue where you left off. If you choose to continue, all
+your correct and incorrect answers will be saved, as well as the time on the
+clock.
+.PP
+However, this technique only works for opening the puzzle on the same computer.
+If you need to open the saved puzzle on a different computer, then you can
+choose "Save" from the "File" menu. The saved file can be opened with Xword on
+any computer. However, incorrect answers and the time on the clock will not be
+saved.
+.PP
+To print a puzzle, select "Print" from the "File" menu. You can see what the
+printed puzzle will look like by clicking "Print Preview". You can select the
+paper size and orientation by clicking on the "Paper" tab (puzzles are usually
+easier to read in landscape mode).
+.PP
+Sometimes a puzzle will be locked so that the answers are unavailable.
+Unfortunately, Xword's support for locked puzzles is somewhat flaky. When using
+a locked puzzle, you should not click on the "Check" or "Solve" buttons, since
+they will give incorrect information. However, you can still use Xword to enter
+answers for a locked puzzle. Later, when an unlocked version of the puzzle is
+released (usually the next day), open it using Xword. When asked, choose to
+continue where you left off. Now you can use the "Check" and "Solve" buttons to
+see how well you did. Sometimes crosswords will come with a four-digit code to
+unlock a locked puzzle file. This code is not needed by Xword ...
+.PP
+For more information, see the project home page at <http://x-word.org>.
+.SH AUTHOR
+xword was written by Bill McCloskey <bill.mccloskey@gmail.com>. 
+.PP
+This manual page was written by John Sullivan <john@wjsullivan.net>,
+for the Debian project (but may be used by others).
+.SH BUGS
+Please report bugs to <bill.mccloskey@gmail.com>.
